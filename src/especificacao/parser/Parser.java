/* This file was generated by SableCC (http://www.sablecc.org/). */

package especificacao.parser;

import especificacao.lexer.*;
import especificacao.node.*;
import especificacao.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PStart node1 = (PStart) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAstartstart1Start */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AAstartstart2Start */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list);
            }
            break;
            case 2: /* reduce AAstartstart3Start */
            {
                ArrayList<Object> list = new2();
                push(goTo(0), list);
            }
            break;
            case 3: /* reduce AAstartstart4Start */
            {
                ArrayList<Object> list = new3();
                push(goTo(0), list);
            }
            break;
            case 4: /* reduce ADeclaracaoCDeclaracao */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list);
            }
            break;
            case 5: /* reduce ADeclaracaoMDeclaracao */
            {
                ArrayList<Object> list = new5();
                push(goTo(1), list);
            }
            break;
            case 6: /* reduce AVarVVarV */
            {
                ArrayList<Object> list = new6();
                push(goTo(2), list);
            }
            break;
            case 7: /* reduce ARealTipo */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list);
            }
            break;
            case 8: /* reduce AInteiroTipo */
            {
                ArrayList<Object> list = new8();
                push(goTo(3), list);
            }
            break;
            case 9: /* reduce ACaractereTipo */
            {
                ArrayList<Object> list = new9();
                push(goTo(3), list);
            }
            break;
            case 10: /* reduce ABooleanoTipo */
            {
                ArrayList<Object> list = new10();
                push(goTo(3), list);
            }
            break;
            case 11: /* reduce AIdVar */
            {
                ArrayList<Object> list = new11();
                push(goTo(4), list);
            }
            break;
            case 12: /* reduce AVetorVar */
            {
                ArrayList<Object> list = new12();
                push(goTo(4), list);
            }
            break;
            case 13: /* reduce AStringValor */
            {
                ArrayList<Object> list = new13();
                push(goTo(5), list);
            }
            break;
            case 14: /* reduce ANInteiroValor */
            {
                ArrayList<Object> list = new14();
                push(goTo(5), list);
            }
            break;
            case 15: /* reduce ANRealValor */
            {
                ArrayList<Object> list = new15();
                push(goTo(5), list);
            }
            break;
            case 16: /* reduce AExpLExp */
            {
                ArrayList<Object> list = new16();
                push(goTo(6), list);
            }
            break;
            case 17: /* reduce AExpAExp */
            {
                ArrayList<Object> list = new17();
                push(goTo(6), list);
            }
            break;
            case 18: /* reduce AExpVExpV */
            {
                ArrayList<Object> list = new18();
                push(goTo(7), list);
            }
            break;
            case 19: /* reduce ASenaoSeSenaoSe */
            {
                ArrayList<Object> list = new19();
                push(goTo(8), list);
            }
            break;
            case 20: /* reduce ACasoAvalieCasoAvalie */
            {
                ArrayList<Object> list = new20();
                push(goTo(9), list);
            }
            break;
            case 21: /* reduce ASenaoAvalieSenaoAvalie */
            {
                ArrayList<Object> list = new21();
                push(goTo(10), list);
            }
            break;
            case 22: /* reduce AAtribuicaoComandos */
            {
                ArrayList<Object> list = new22();
                push(goTo(11), list);
            }
            break;
            case 23: /* reduce AAleiacomandos1Comandos */
            {
                ArrayList<Object> list = new23();
                push(goTo(11), list);
            }
            break;
            case 24: /* reduce AAleiacomandos2$VarList1Comandos */
            {
                ArrayList<Object> list = new24();
                push(goTo(11), list);
            }
            break;
            case 25: /* reduce AAescrevacomandos1Comandos */
            {
                ArrayList<Object> list = new25();
                push(goTo(11), list);
            }
            break;
            case 26: /* reduce AAescrevacomandos2$ExpList1Comandos */
            {
                ArrayList<Object> list = new26();
                push(goTo(11), list);
            }
            break;
            case 27: /* reduce AAsecomandos1Comandos */
            {
                ArrayList<Object> list = new27();
                push(goTo(11), list);
            }
            break;
            case 28: /* reduce AAsecomandos2Comandos */
            {
                ArrayList<Object> list = new28();
                push(goTo(11), list);
            }
            break;
            case 29: /* reduce AAavaliecomandos1Comandos */
            {
                ArrayList<Object> list = new29();
                push(goTo(11), list);
            }
            break;
            case 30: /* reduce AAavaliecomandos2Comandos */
            {
                ArrayList<Object> list = new30();
                push(goTo(11), list);
            }
            break;
            case 31: /* reduce AAavaliecomandos3Comandos */
            {
                ArrayList<Object> list = new31();
                push(goTo(11), list);
            }
            break;
            case 32: /* reduce AAavaliecomandos4Comandos */
            {
                ArrayList<Object> list = new32();
                push(goTo(11), list);
            }
            break;
            case 33: /* reduce AEnquantoComandos */
            {
                ArrayList<Object> list = new33();
                push(goTo(11), list);
            }
            break;
            case 34: /* reduce ARepitaComandos */
            {
                ArrayList<Object> list = new34();
                push(goTo(11), list);
            }
            break;
            case 35: /* reduce AParaComandos */
            {
                ArrayList<Object> list = new35();
                push(goTo(11), list);
            }
            break;
            case 36: /* reduce AParaPassoComandos */
            {
                ArrayList<Object> list = new36();
                push(goTo(11), list);
            }
            break;
            case 37: /* reduce ASomaExpAritmetica */
            {
                ArrayList<Object> list = new37();
                push(goTo(12), list);
            }
            break;
            case 38: /* reduce ASubtracaoExpAritmetica */
            {
                ArrayList<Object> list = new38();
                push(goTo(12), list);
            }
            break;
            case 39: /* reduce ATermoExpAritmetica */
            {
                ArrayList<Object> list = new39();
                push(goTo(12), list);
            }
            break;
            case 40: /* reduce AMultTermoAritmetico */
            {
                ArrayList<Object> list = new40();
                push(goTo(13), list);
            }
            break;
            case 41: /* reduce ADivTermoAritmetico */
            {
                ArrayList<Object> list = new41();
                push(goTo(13), list);
            }
            break;
            case 42: /* reduce AFatorTermoAritmetico */
            {
                ArrayList<Object> list = new42();
                push(goTo(13), list);
            }
            break;
            case 43: /* reduce AExpParentesesFatorAritmetico */
            {
                ArrayList<Object> list = new43();
                push(goTo(14), list);
            }
            break;
            case 44: /* reduce AValorFatorAritmetico */
            {
                ArrayList<Object> list = new44();
                push(goTo(14), list);
            }
            break;
            case 45: /* reduce AMenosFatorAritmetico */
            {
                ArrayList<Object> list = new45();
                push(goTo(14), list);
            }
            break;
            case 46: /* reduce AVarFatorAritmetico */
            {
                ArrayList<Object> list = new46();
                push(goTo(14), list);
            }
            break;
            case 47: /* reduce AEExpLogica */
            {
                ArrayList<Object> list = new47();
                push(goTo(15), list);
            }
            break;
            case 48: /* reduce AOuExpLogica */
            {
                ArrayList<Object> list = new48();
                push(goTo(15), list);
            }
            break;
            case 49: /* reduce ANaoExpLogica */
            {
                ArrayList<Object> list = new49();
                push(goTo(15), list);
            }
            break;
            case 50: /* reduce AXorExpLogica */
            {
                ArrayList<Object> list = new50();
                push(goTo(15), list);
            }
            break;
            case 51: /* reduce ATermoLExpLogica */
            {
                ArrayList<Object> list = new51();
                push(goTo(15), list);
            }
            break;
            case 52: /* reduce AExploParentesesTermoLogico */
            {
                ArrayList<Object> list = new52();
                push(goTo(16), list);
            }
            break;
            case 53: /* reduce ARelacionalTermoLogico */
            {
                ArrayList<Object> list = new53();
                push(goTo(16), list);
            }
            break;
            case 54: /* reduce AIgualExpRelacional */
            {
                ArrayList<Object> list = new54();
                push(goTo(17), list);
            }
            break;
            case 55: /* reduce ADiferenteExpRelacional */
            {
                ArrayList<Object> list = new55();
                push(goTo(17), list);
            }
            break;
            case 56: /* reduce AMenorIgualExpRelacional */
            {
                ArrayList<Object> list = new56();
                push(goTo(17), list);
            }
            break;
            case 57: /* reduce AMaiorIgualExpRelacional */
            {
                ArrayList<Object> list = new57();
                push(goTo(17), list);
            }
            break;
            case 58: /* reduce AMenorExpRelacional */
            {
                ArrayList<Object> list = new58();
                push(goTo(17), list);
            }
            break;
            case 59: /* reduce AMaiorExpRelacional */
            {
                ArrayList<Object> list = new59();
                push(goTo(17), list);
            }
            break;
            case 60: /* reduce ATerminal$Declaracao */
            {
                ArrayList<Object> list = new60();
                push(goTo(18), list);
            }
            break;
            case 61: /* reduce ANonTerminal$Declaracao */
            {
                ArrayList<Object> list = new61();
                push(goTo(18), list);
            }
            break;
            case 62: /* reduce ATerminal$Comandos */
            {
                ArrayList<Object> list = new62();
                push(goTo(19), list);
            }
            break;
            case 63: /* reduce ANonTerminal$Comandos */
            {
                ArrayList<Object> list = new63();
                push(goTo(19), list);
            }
            break;
            case 64: /* reduce ATerminal$Var */
            {
                ArrayList<Object> list = new64();
                push(goTo(20), list);
            }
            break;
            case 65: /* reduce ANonTerminal$Var */
            {
                ArrayList<Object> list = new65();
                push(goTo(20), list);
            }
            break;
            case 66: /* reduce ATerminal$VarV */
            {
                ArrayList<Object> list = new66();
                push(goTo(21), list);
            }
            break;
            case 67: /* reduce ANonTerminal$VarV */
            {
                ArrayList<Object> list = new67();
                push(goTo(21), list);
            }
            break;
            case 68: /* reduce ATerminal$ExpV */
            {
                ArrayList<Object> list = new68();
                push(goTo(22), list);
            }
            break;
            case 69: /* reduce ANonTerminal$ExpV */
            {
                ArrayList<Object> list = new69();
                push(goTo(22), list);
            }
            break;
            case 70: /* reduce ATerminal$CasoAvalie */
            {
                ArrayList<Object> list = new70();
                push(goTo(23), list);
            }
            break;
            case 71: /* reduce ANonTerminal$CasoAvalie */
            {
                ArrayList<Object> list = new71();
                push(goTo(23), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAstartstart1Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        }

        pstartNode1 = new AStart(listNode2, listNode3);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAstartstart2Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList4.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        }

        pstartNode1 = new AStart(listNode3, listNode4);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAstartstart3Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pstartNode1 = new AStart(listNode2, listNode4);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAstartstart4Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList4.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pstartNode1 = new AStart(listNode3, listNode5);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ADeclaracaoCDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        TId tidNode2;
        PValor pvalorNode3;
        tidNode2 = (TId)nodeArrayList2.get(0);
        pvalorNode3 = (PValor)nodeArrayList3.get(0);

        pdeclaracaoNode1 = new ADeclaracaoCDeclaracao(tidNode2, pvalorNode3);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce ADeclaracaoMDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pdeclaracaoNode1 = new ADeclaracaoMDeclaracao(listNode3);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AVarVVarV */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ARealTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TReal trealNode2;
        trealNode2 = (TReal)nodeArrayList1.get(0);

        ptipoNode1 = new ARealTipo(trealNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AInteiroTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TInteiro tinteiroNode2;
        tinteiroNode2 = (TInteiro)nodeArrayList1.get(0);

        ptipoNode1 = new AInteiroTipo(tinteiroNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce ACaractereTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TCaractere tcaractereNode2;
        tcaractereNode2 = (TCaractere)nodeArrayList1.get(0);

        ptipoNode1 = new ACaractereTipo(tcaractereNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ABooleanoTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TBooleano tbooleanoNode2;
        tbooleanoNode2 = (TBooleano)nodeArrayList1.get(0);

        ptipoNode1 = new ABooleanoTipo(tbooleanoNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AIdVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pvarNode1 = new AIdVar(tidNode2);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AVetorVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TId tidNode2;
        TNInteiro tninteiroNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tninteiroNode3 = (TNInteiro)nodeArrayList3.get(0);

        pvarNode1 = new AVetorVar(tidNode2, tninteiroNode3);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AStringValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        pvalorNode1 = new AStringValor(tstringNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ANInteiroValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TNInteiro tninteiroNode2;
        tninteiroNode2 = (TNInteiro)nodeArrayList1.get(0);

        pvalorNode1 = new ANInteiroValor(tninteiroNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ANRealValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TNReal tnrealNode2;
        tnrealNode2 = (TNReal)nodeArrayList1.get(0);

        pvalorNode1 = new ANRealValor(tnrealNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AExpLExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        pexplogicaNode2 = (PExpLogica)nodeArrayList1.get(0);

        pexpNode1 = new AExpLExp(pexplogicaNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AExpAExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExpAritmetica pexparitmeticaNode2;
        pexparitmeticaNode2 = (PExpAritmetica)nodeArrayList1.get(0);

        pexpNode1 = new AExpAExp(pexparitmeticaNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AExpVExpV */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce ASenaoSeSenaoSe */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce ACasoAvalieCasoAvalie */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce ASenaoAvalieSenaoAvalie */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AAtribuicaoComandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandos pcomandosNode1;
        {
            // Block
        PVar pvarNode2;
        PExp pexpNode3;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pcomandosNode1 = new AAtribuicaoComandos(pvarNode2, pexpNode3);
        }
	nodeList.add(pcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AAleiacomandos1Comandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandos pcomandosNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList3.get(0);
	if(pvarNode2 != null)
	{
	  listNode3.add(pvarNode2);
	}
        }

        pcomandosNode1 = new ALeiaComandos(listNode3);
        }
	nodeList.add(pcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AAleiacomandos2$VarList1Comandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandos pcomandosNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList4.get(0);
	if(pvarNode2 != null)
	{
	  listNode3.add(pvarNode2);
	}
        }

        pcomandosNode1 = new ALeiaComandos(listNode3);
        }
	nodeList.add(pcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AAescrevacomandos1Comandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandos pcomandosNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
	if(pexpNode2 != null)
	{
	  listNode3.add(pexpNode2);
	}
        }

        pcomandosNode1 = new AEscrevaComandos(listNode3);
        }
	nodeList.add(pcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AAescrevacomandos2$ExpList1Comandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandos pcomandosNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList4.get(0);
	if(pexpNode2 != null)
	{
	  listNode3.add(pexpNode2);
	}
        }

        pcomandosNode1 = new AEscrevaComandos(listNode3);
        }
	nodeList.add(pcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AAsecomandos1Comandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandos pcomandosNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        pexplogicaNode2 = (PExpLogica)nodeArrayList3.get(0);

        pcomandosNode1 = new ASeComandos(pexplogicaNode2);
        }
	nodeList.add(pcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AAsecomandos2Comandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandos pcomandosNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        pexplogicaNode2 = (PExpLogica)nodeArrayList3.get(0);

        pcomandosNode1 = new ASeComandos(pexplogicaNode2);
        }
	nodeList.add(pcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AAavaliecomandos1Comandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandos pcomandosNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList3.get(0);

        pcomandosNode1 = new AAvalieComandos(pexpNode2);
        }
	nodeList.add(pcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AAavaliecomandos2Comandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandos pcomandosNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList3.get(0);

        pcomandosNode1 = new AAvalieComandos(pexpNode2);
        }
	nodeList.add(pcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AAavaliecomandos3Comandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandos pcomandosNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList3.get(0);

        pcomandosNode1 = new AAvalieComandos(pexpNode2);
        }
	nodeList.add(pcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AAavaliecomandos4Comandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandos pcomandosNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList3.get(0);

        pcomandosNode1 = new AAvalieComandos(pexpNode2);
        }
	nodeList.add(pcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AEnquantoComandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandos pcomandosNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        pexplogicaNode2 = (PExpLogica)nodeArrayList3.get(0);

        pcomandosNode1 = new AEnquantoComandos(pexplogicaNode2);
        }
	nodeList.add(pcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ARepitaComandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandos pcomandosNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        pexplogicaNode2 = (PExpLogica)nodeArrayList5.get(0);

        pcomandosNode1 = new ARepitaComandos(pexplogicaNode2);
        }
	nodeList.add(pcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AParaComandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandos pcomandosNode1;
        {
            // Block
        PVar pvarNode2;
        TNInteiro tninteiroNode3;
        TNInteiro tninteiroNode4;
        pvarNode2 = (PVar)nodeArrayList2.get(0);
        tninteiroNode3 = (TNInteiro)nodeArrayList4.get(0);
        tninteiroNode4 = (TNInteiro)nodeArrayList6.get(0);

        pcomandosNode1 = new AParaComandos(pvarNode2, tninteiroNode3, tninteiroNode4);
        }
	nodeList.add(pcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AParaPassoComandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandos pcomandosNode1;
        {
            // Block
        PVar pvarNode2;
        TNInteiro tninteiroNode3;
        TNInteiro tninteiroNode4;
        TNInteiro tninteiroNode5;
        pvarNode2 = (PVar)nodeArrayList2.get(0);
        tninteiroNode3 = (TNInteiro)nodeArrayList4.get(0);
        tninteiroNode4 = (TNInteiro)nodeArrayList6.get(0);
        tninteiroNode5 = (TNInteiro)nodeArrayList8.get(0);

        pcomandosNode1 = new AParaPassoComandos(pvarNode2, tninteiroNode3, tninteiroNode4, tninteiroNode5);
        }
	nodeList.add(pcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce ASomaExpAritmetica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpAritmetica pexparitmeticaNode1;
        {
            // Block
        PExpAritmetica pexparitmeticaNode2;
        PExpAritmetica pexparitmeticaNode3;
        pexparitmeticaNode2 = (PExpAritmetica)nodeArrayList1.get(0);
        pexparitmeticaNode3 = (PExpAritmetica)nodeArrayList3.get(0);

        pexparitmeticaNode1 = new ASomaExpAritmetica(pexparitmeticaNode2, pexparitmeticaNode3);
        }
	nodeList.add(pexparitmeticaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce ASubtracaoExpAritmetica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpAritmetica pexparitmeticaNode1;
        {
            // Block
        PExpAritmetica pexparitmeticaNode2;
        PExpAritmetica pexparitmeticaNode3;
        pexparitmeticaNode2 = (PExpAritmetica)nodeArrayList1.get(0);
        pexparitmeticaNode3 = (PExpAritmetica)nodeArrayList3.get(0);

        pexparitmeticaNode1 = new ASubtracaoExpAritmetica(pexparitmeticaNode2, pexparitmeticaNode3);
        }
	nodeList.add(pexparitmeticaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ATermoExpAritmetica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpAritmetica pexparitmeticaNode1;
        pexparitmeticaNode1 = (PExpAritmetica)nodeArrayList1.get(0);
	nodeList.add(pexparitmeticaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AMultTermoAritmetico */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpAritmetica pexparitmeticaNode1;
        {
            // Block
        PExpAritmetica pexparitmeticaNode2;
        PExpAritmetica pexparitmeticaNode3;
        pexparitmeticaNode2 = (PExpAritmetica)nodeArrayList1.get(0);
        pexparitmeticaNode3 = (PExpAritmetica)nodeArrayList3.get(0);

        pexparitmeticaNode1 = new AMultExpAritmetica(pexparitmeticaNode2, pexparitmeticaNode3);
        }
	nodeList.add(pexparitmeticaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce ADivTermoAritmetico */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpAritmetica pexparitmeticaNode1;
        {
            // Block
        PExpAritmetica pexparitmeticaNode2;
        PExpAritmetica pexparitmeticaNode3;
        pexparitmeticaNode2 = (PExpAritmetica)nodeArrayList1.get(0);
        pexparitmeticaNode3 = (PExpAritmetica)nodeArrayList3.get(0);

        pexparitmeticaNode1 = new ADivExpAritmetica(pexparitmeticaNode2, pexparitmeticaNode3);
        }
	nodeList.add(pexparitmeticaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AFatorTermoAritmetico */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpAritmetica pexparitmeticaNode1;
        pexparitmeticaNode1 = (PExpAritmetica)nodeArrayList1.get(0);
	nodeList.add(pexparitmeticaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AExpParentesesFatorAritmetico */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpAritmetica pexparitmeticaNode1;
        {
            // Block
        PExpAritmetica pexparitmeticaNode2;
        pexparitmeticaNode2 = (PExpAritmetica)nodeArrayList2.get(0);

        pexparitmeticaNode1 = new AExpParentesesExpAritmetica(pexparitmeticaNode2);
        }
	nodeList.add(pexparitmeticaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AValorFatorAritmetico */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpAritmetica pexparitmeticaNode1;
        {
            // Block
        PValor pvalorNode2;
        pvalorNode2 = (PValor)nodeArrayList1.get(0);

        pexparitmeticaNode1 = new AValorExpAritmetica(pvalorNode2);
        }
	nodeList.add(pexparitmeticaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AMenosFatorAritmetico */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpAritmetica pexparitmeticaNode1;
        {
            // Block
        PExpAritmetica pexparitmeticaNode2;
        pexparitmeticaNode2 = (PExpAritmetica)nodeArrayList2.get(0);

        pexparitmeticaNode1 = new AMenosExpAritmetica(pexparitmeticaNode2);
        }
	nodeList.add(pexparitmeticaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AVarFatorAritmetico */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpAritmetica pexparitmeticaNode1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList1.get(0);

        pexparitmeticaNode1 = new AVarExpAritmetica(pvarNode2);
        }
	nodeList.add(pexparitmeticaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AEExpLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        PExpLogica pexplogicaNode3;
        pexplogicaNode2 = (PExpLogica)nodeArrayList1.get(0);
        pexplogicaNode3 = (PExpLogica)nodeArrayList3.get(0);

        pexplogicaNode1 = new AEExpLogica(pexplogicaNode2, pexplogicaNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AOuExpLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        PExpLogica pexplogicaNode3;
        pexplogicaNode2 = (PExpLogica)nodeArrayList1.get(0);
        pexplogicaNode3 = (PExpLogica)nodeArrayList3.get(0);

        pexplogicaNode1 = new AOuExpLogica(pexplogicaNode2, pexplogicaNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce ANaoExpLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        pexplogicaNode2 = (PExpLogica)nodeArrayList2.get(0);

        pexplogicaNode1 = new ANaoExpLogica(pexplogicaNode2);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AXorExpLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        PExpLogica pexplogicaNode3;
        pexplogicaNode2 = (PExpLogica)nodeArrayList1.get(0);
        pexplogicaNode3 = (PExpLogica)nodeArrayList3.get(0);

        pexplogicaNode1 = new AXorExpLogica(pexplogicaNode2, pexplogicaNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce ATermoLExpLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        pexplogicaNode1 = (PExpLogica)nodeArrayList1.get(0);
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AExploParentesesTermoLogico */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        pexplogicaNode1 = (PExpLogica)nodeArrayList2.get(0);
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce ARelacionalTermoLogico */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        pexplogicaNode1 = (PExpLogica)nodeArrayList1.get(0);
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AIgualExpRelacional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExpAritmetica pexparitmeticaNode2;
        PExpAritmetica pexparitmeticaNode3;
        pexparitmeticaNode2 = (PExpAritmetica)nodeArrayList1.get(0);
        pexparitmeticaNode3 = (PExpAritmetica)nodeArrayList3.get(0);

        pexplogicaNode1 = new AIgualExpLogica(pexparitmeticaNode2, pexparitmeticaNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce ADiferenteExpRelacional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExpAritmetica pexparitmeticaNode2;
        PExpAritmetica pexparitmeticaNode3;
        pexparitmeticaNode2 = (PExpAritmetica)nodeArrayList1.get(0);
        pexparitmeticaNode3 = (PExpAritmetica)nodeArrayList3.get(0);

        pexplogicaNode1 = new ADiferenteExpLogica(pexparitmeticaNode2, pexparitmeticaNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AMenorIgualExpRelacional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExpAritmetica pexparitmeticaNode2;
        PExpAritmetica pexparitmeticaNode3;
        pexparitmeticaNode2 = (PExpAritmetica)nodeArrayList1.get(0);
        pexparitmeticaNode3 = (PExpAritmetica)nodeArrayList3.get(0);

        pexplogicaNode1 = new AMenorIgualExpLogica(pexparitmeticaNode2, pexparitmeticaNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AMaiorIgualExpRelacional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExpAritmetica pexparitmeticaNode2;
        PExpAritmetica pexparitmeticaNode3;
        pexparitmeticaNode2 = (PExpAritmetica)nodeArrayList1.get(0);
        pexparitmeticaNode3 = (PExpAritmetica)nodeArrayList3.get(0);

        pexplogicaNode1 = new AMaiorIgualExpLogica(pexparitmeticaNode2, pexparitmeticaNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AMenorExpRelacional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExpAritmetica pexparitmeticaNode2;
        PExpAritmetica pexparitmeticaNode3;
        pexparitmeticaNode2 = (PExpAritmetica)nodeArrayList1.get(0);
        pexparitmeticaNode3 = (PExpAritmetica)nodeArrayList3.get(0);

        pexplogicaNode1 = new AMenorExpLogica(pexparitmeticaNode2, pexparitmeticaNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AMaiorExpRelacional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExpAritmetica pexparitmeticaNode2;
        PExpAritmetica pexparitmeticaNode3;
        pexparitmeticaNode2 = (PExpAritmetica)nodeArrayList1.get(0);
        pexparitmeticaNode3 = (PExpAritmetica)nodeArrayList3.get(0);

        pexplogicaNode1 = new AMaiorExpLogica(pexparitmeticaNode2, pexparitmeticaNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce ATerminal$Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDeclaracao pdeclaracaoNode1;
        pdeclaracaoNode1 = (PDeclaracao)nodeArrayList1.get(0);
	if(pdeclaracaoNode1 != null)
	{
	  listNode2.add(pdeclaracaoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce ANonTerminal$Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PDeclaracao pdeclaracaoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdeclaracaoNode2 = (PDeclaracao)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdeclaracaoNode2 != null)
	{
	  listNode3.add(pdeclaracaoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce ATerminal$Comandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PComandos pcomandosNode1;
        pcomandosNode1 = (PComandos)nodeArrayList1.get(0);
	if(pcomandosNode1 != null)
	{
	  listNode2.add(pcomandosNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce ANonTerminal$Comandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PComandos pcomandosNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcomandosNode2 = (PComandos)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcomandosNode2 != null)
	{
	  listNode3.add(pcomandosNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce ATerminal$Var */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PVar pvarNode1;
        pvarNode1 = (PVar)nodeArrayList1.get(0);
	if(pvarNode1 != null)
	{
	  listNode2.add(pvarNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce ANonTerminal$Var */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PVar pvarNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pvarNode2 = (PVar)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvarNode2 != null)
	{
	  listNode3.add(pvarNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce ATerminal$VarV */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce ANonTerminal$VarV */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce ATerminal$ExpV */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce ANonTerminal$ExpV */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce ATerminal$CasoAvalie */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce ANonTerminal$CasoAvalie */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {25, SHIFT, 1}, },
			{{-1, ERROR, 1}, {56, SHIFT, 3}, },
			{{-1, ERROR, 2}, {61, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {26, SHIFT, 4}, },
			{{-1, ERROR, 4}, {27, SHIFT, 5}, {28, SHIFT, 6}, {29, SHIFT, 7}, {30, SHIFT, 8}, {32, SHIFT, 9}, {33, SHIFT, 10}, {34, SHIFT, 11}, {37, SHIFT, 12}, {41, SHIFT, 13}, {44, SHIFT, 14}, {49, SHIFT, 15}, {52, SHIFT, 16}, {56, SHIFT, 17}, {57, SHIFT, 18}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 9}, {21, SHIFT, 25}, },
			{{-1, ERROR, 10}, {21, SHIFT, 26}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 12}, {21, SHIFT, 27}, },
			{{-1, ERROR, 13}, {21, SHIFT, 28}, },
			{{-1, ERROR, 14}, {56, SHIFT, 17}, },
			{{-1, ERROR, 15}, {21, SHIFT, 30}, },
			{{-1, ERROR, 16}, {32, SHIFT, 9}, {33, SHIFT, 10}, {37, SHIFT, 12}, {41, SHIFT, 13}, {44, SHIFT, 14}, {49, SHIFT, 15}, {52, SHIFT, 16}, {56, SHIFT, 17}, },
			{{-1, REDUCE, 11}, {18, SHIFT, 32}, },
			{{-1, ERROR, 18}, {56, SHIFT, 33}, },
			{{-1, REDUCE, 60}, },
			{{-1, ERROR, 20}, {20, SHIFT, 34}, },
			{{-1, ERROR, 21}, {11, SHIFT, 35}, },
			{{-1, REDUCE, 62}, },
			{{-1, ERROR, 23}, {27, SHIFT, 36}, {28, SHIFT, 6}, {29, SHIFT, 7}, {30, SHIFT, 8}, {32, SHIFT, 9}, {33, SHIFT, 10}, {34, SHIFT, 11}, {37, SHIFT, 12}, {41, SHIFT, 13}, {44, SHIFT, 14}, {49, SHIFT, 15}, {52, SHIFT, 16}, {56, SHIFT, 17}, {57, SHIFT, 18}, },
			{{-1, ERROR, 24}, {27, SHIFT, 39}, {32, SHIFT, 9}, {33, SHIFT, 10}, {37, SHIFT, 12}, {41, SHIFT, 13}, {44, SHIFT, 14}, {49, SHIFT, 15}, {52, SHIFT, 16}, {56, SHIFT, 17}, },
			{{-1, ERROR, 25}, {56, SHIFT, 17}, },
			{{-1, ERROR, 26}, {0, SHIFT, 44}, {12, SHIFT, 45}, {21, SHIFT, 46}, {31, SHIFT, 47}, {54, SHIFT, 48}, {55, SHIFT, 49}, {56, SHIFT, 17}, },
			{{-1, ERROR, 27}, {0, SHIFT, 44}, {12, SHIFT, 45}, {21, SHIFT, 46}, {31, SHIFT, 47}, {54, SHIFT, 48}, {55, SHIFT, 49}, {56, SHIFT, 17}, },
			{{-1, ERROR, 28}, {0, SHIFT, 44}, {12, SHIFT, 45}, {21, SHIFT, 46}, {31, SHIFT, 47}, {54, SHIFT, 48}, {55, SHIFT, 49}, {56, SHIFT, 17}, },
			{{-1, ERROR, 29}, {45, SHIFT, 64}, },
			{{-1, ERROR, 30}, {0, SHIFT, 44}, {12, SHIFT, 45}, {21, SHIFT, 46}, {31, SHIFT, 47}, {54, SHIFT, 48}, {55, SHIFT, 49}, {56, SHIFT, 17}, },
			{{-1, ERROR, 31}, {32, SHIFT, 9}, {33, SHIFT, 10}, {37, SHIFT, 12}, {41, SHIFT, 13}, {44, SHIFT, 14}, {46, SHIFT, 66}, {49, SHIFT, 15}, {52, SHIFT, 16}, {56, SHIFT, 17}, },
			{{-1, ERROR, 32}, {54, SHIFT, 67}, },
			{{-1, ERROR, 33}, {31, SHIFT, 47}, {54, SHIFT, 48}, {55, SHIFT, 49}, },
			{{-1, ERROR, 34}, {56, SHIFT, 17}, },
			{{-1, ERROR, 35}, {0, SHIFT, 44}, {12, SHIFT, 45}, {21, SHIFT, 46}, {31, SHIFT, 47}, {54, SHIFT, 48}, {55, SHIFT, 49}, {56, SHIFT, 17}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 61}, },
			{{-1, ERROR, 38}, {27, SHIFT, 72}, {32, SHIFT, 9}, {33, SHIFT, 10}, {37, SHIFT, 12}, {41, SHIFT, 13}, {44, SHIFT, 14}, {49, SHIFT, 15}, {52, SHIFT, 16}, {56, SHIFT, 17}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 66}, },
			{{-1, ERROR, 42}, {16, SHIFT, 73}, {22, SHIFT, 74}, },
			{{-1, ERROR, 43}, {56, SHIFT, 17}, },
			{{-1, ERROR, 44}, {0, SHIFT, 44}, {21, SHIFT, 77}, {31, SHIFT, 47}, {54, SHIFT, 48}, {55, SHIFT, 49}, {56, SHIFT, 17}, },
			{{-1, ERROR, 45}, {0, SHIFT, 44}, {21, SHIFT, 46}, {31, SHIFT, 47}, {54, SHIFT, 48}, {55, SHIFT, 49}, {56, SHIFT, 17}, },
			{{-1, ERROR, 46}, {0, SHIFT, 44}, {12, SHIFT, 45}, {21, SHIFT, 46}, {31, SHIFT, 47}, {54, SHIFT, 48}, {55, SHIFT, 49}, {56, SHIFT, 17}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 44}, },
			{{-1, ERROR, 52}, {16, SHIFT, 82}, {22, SHIFT, 83}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 17}, {0, SHIFT, 84}, {1, SHIFT, 85}, {5, SHIFT, 86}, {6, SHIFT, 87}, {7, SHIFT, 88}, {8, SHIFT, 89}, {9, SHIFT, 90}, {10, SHIFT, 91}, },
			{{-1, REDUCE, 39}, {2, SHIFT, 92}, {3, SHIFT, 93}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 16}, {13, SHIFT, 94}, {14, SHIFT, 95}, {15, SHIFT, 96}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 60}, {0, SHIFT, 44}, {12, SHIFT, 45}, {21, SHIFT, 46}, {31, SHIFT, 47}, {54, SHIFT, 48}, {55, SHIFT, 49}, {56, SHIFT, 17}, },
			{{-1, ERROR, 61}, {0, SHIFT, 84}, {1, SHIFT, 85}, {5, SHIFT, 86}, {6, SHIFT, 87}, {7, SHIFT, 88}, {8, SHIFT, 89}, {9, SHIFT, 90}, {10, SHIFT, 91}, },
			{{-1, ERROR, 62}, {13, SHIFT, 94}, {14, SHIFT, 95}, {15, SHIFT, 96}, {22, SHIFT, 99}, },
			{{-1, ERROR, 63}, {13, SHIFT, 94}, {14, SHIFT, 95}, {15, SHIFT, 96}, {22, SHIFT, 100}, },
			{{-1, ERROR, 64}, {54, SHIFT, 101}, },
			{{-1, ERROR, 65}, {22, SHIFT, 102}, },
			{{-1, ERROR, 66}, {21, SHIFT, 103}, },
			{{-1, ERROR, 67}, {19, SHIFT, 104}, },
			{{-1, ERROR, 68}, {17, SHIFT, 105}, },
			{{-1, REDUCE, 64}, },
			{{-1, ERROR, 70}, {17, SHIFT, 106}, {56, SHIFT, 17}, },
			{{-1, ERROR, 71}, {17, SHIFT, 108}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 74}, {17, SHIFT, 109}, },
			{{-1, REDUCE, 67}, },
			{{-1, ERROR, 76}, {16, SHIFT, 73}, {22, SHIFT, 110}, },
			{{-1, ERROR, 77}, {0, SHIFT, 44}, {21, SHIFT, 77}, {31, SHIFT, 47}, {54, SHIFT, 48}, {55, SHIFT, 49}, {56, SHIFT, 17}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 49}, },
			{{-1, ERROR, 80}, {0, SHIFT, 84}, {1, SHIFT, 85}, {5, SHIFT, 86}, {6, SHIFT, 87}, {7, SHIFT, 88}, {8, SHIFT, 89}, {9, SHIFT, 90}, {10, SHIFT, 91}, {22, SHIFT, 112}, },
			{{-1, ERROR, 81}, {13, SHIFT, 94}, {14, SHIFT, 95}, {15, SHIFT, 96}, {22, SHIFT, 113}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 83}, {17, SHIFT, 114}, },
			{{-1, ERROR, 84}, {0, SHIFT, 44}, {21, SHIFT, 77}, {31, SHIFT, 47}, {54, SHIFT, 48}, {55, SHIFT, 49}, {56, SHIFT, 17}, },
			{{-1, ERROR, 85}, {0, SHIFT, 44}, {21, SHIFT, 77}, {31, SHIFT, 47}, {54, SHIFT, 48}, {55, SHIFT, 49}, {56, SHIFT, 17}, },
			{{-1, ERROR, 86}, {0, SHIFT, 44}, {21, SHIFT, 77}, {31, SHIFT, 47}, {54, SHIFT, 48}, {55, SHIFT, 49}, {56, SHIFT, 17}, },
			{{-1, ERROR, 87}, {0, SHIFT, 44}, {21, SHIFT, 77}, {31, SHIFT, 47}, {54, SHIFT, 48}, {55, SHIFT, 49}, {56, SHIFT, 17}, },
			{{-1, ERROR, 88}, {0, SHIFT, 44}, {21, SHIFT, 77}, {31, SHIFT, 47}, {54, SHIFT, 48}, {55, SHIFT, 49}, {56, SHIFT, 17}, },
			{{-1, ERROR, 89}, {0, SHIFT, 44}, {21, SHIFT, 77}, {31, SHIFT, 47}, {54, SHIFT, 48}, {55, SHIFT, 49}, {56, SHIFT, 17}, },
			{{-1, ERROR, 90}, {0, SHIFT, 44}, {21, SHIFT, 77}, {31, SHIFT, 47}, {54, SHIFT, 48}, {55, SHIFT, 49}, {56, SHIFT, 17}, },
			{{-1, ERROR, 91}, {0, SHIFT, 44}, {21, SHIFT, 77}, {31, SHIFT, 47}, {54, SHIFT, 48}, {55, SHIFT, 49}, {56, SHIFT, 17}, },
			{{-1, ERROR, 92}, {0, SHIFT, 44}, {21, SHIFT, 77}, {31, SHIFT, 47}, {54, SHIFT, 48}, {55, SHIFT, 49}, {56, SHIFT, 17}, },
			{{-1, ERROR, 93}, {0, SHIFT, 44}, {21, SHIFT, 77}, {31, SHIFT, 47}, {54, SHIFT, 48}, {55, SHIFT, 49}, {56, SHIFT, 17}, },
			{{-1, ERROR, 94}, {0, SHIFT, 44}, {21, SHIFT, 46}, {31, SHIFT, 47}, {54, SHIFT, 48}, {55, SHIFT, 49}, {56, SHIFT, 17}, },
			{{-1, ERROR, 95}, {0, SHIFT, 44}, {21, SHIFT, 46}, {31, SHIFT, 47}, {54, SHIFT, 48}, {55, SHIFT, 49}, {56, SHIFT, 17}, },
			{{-1, ERROR, 96}, {0, SHIFT, 44}, {21, SHIFT, 46}, {31, SHIFT, 47}, {54, SHIFT, 48}, {55, SHIFT, 49}, {56, SHIFT, 17}, },
			{{-1, ERROR, 97}, {16, SHIFT, 82}, {22, SHIFT, 128}, },
			{{-1, REDUCE, 69}, },
			{{-1, ERROR, 99}, {38, SHIFT, 129}, },
			{{-1, ERROR, 100}, {42, SHIFT, 130}, },
			{{-1, ERROR, 101}, {46, SHIFT, 131}, {47, SHIFT, 132}, },
			{{-1, ERROR, 102}, {39, SHIFT, 133}, {50, SHIFT, 134}, {51, SHIFT, 135}, },
			{{-1, ERROR, 103}, {0, SHIFT, 44}, {12, SHIFT, 45}, {21, SHIFT, 46}, {31, SHIFT, 47}, {54, SHIFT, 48}, {55, SHIFT, 49}, {56, SHIFT, 17}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 110}, {17, SHIFT, 140}, },
			{{-1, ERROR, 111}, {0, SHIFT, 84}, {1, SHIFT, 85}, {22, SHIFT, 112}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 38}, {2, SHIFT, 92}, {3, SHIFT, 93}, },
			{{-1, REDUCE, 37}, {2, SHIFT, 92}, {3, SHIFT, 93}, },
			{{-1, REDUCE, 59}, {0, SHIFT, 84}, {1, SHIFT, 85}, },
			{{-1, REDUCE, 58}, {0, SHIFT, 84}, {1, SHIFT, 85}, },
			{{-1, REDUCE, 57}, {0, SHIFT, 84}, {1, SHIFT, 85}, },
			{{-1, REDUCE, 56}, {0, SHIFT, 84}, {1, SHIFT, 85}, },
			{{-1, REDUCE, 54}, {0, SHIFT, 84}, {1, SHIFT, 85}, },
			{{-1, REDUCE, 55}, {0, SHIFT, 84}, {1, SHIFT, 85}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 128}, {17, SHIFT, 141}, },
			{{-1, ERROR, 129}, {32, SHIFT, 9}, {33, SHIFT, 10}, {37, SHIFT, 12}, {41, SHIFT, 13}, {44, SHIFT, 14}, {49, SHIFT, 15}, {52, SHIFT, 16}, {56, SHIFT, 17}, },
			{{-1, ERROR, 130}, {32, SHIFT, 9}, {33, SHIFT, 10}, {37, SHIFT, 12}, {41, SHIFT, 13}, {44, SHIFT, 14}, {49, SHIFT, 15}, {52, SHIFT, 16}, {56, SHIFT, 17}, },
			{{-1, ERROR, 131}, {54, SHIFT, 144}, },
			{{-1, ERROR, 132}, {54, SHIFT, 145}, },
			{{-1, ERROR, 133}, {20, SHIFT, 146}, },
			{{-1, ERROR, 134}, {31, SHIFT, 47}, {54, SHIFT, 48}, {55, SHIFT, 49}, },
			{{-1, ERROR, 135}, {17, SHIFT, 148}, },
			{{-1, REDUCE, 70}, },
			{{-1, ERROR, 137}, {51, SHIFT, 149}, },
			{{-1, ERROR, 138}, {39, SHIFT, 133}, {50, SHIFT, 134}, {51, SHIFT, 150}, },
			{{-1, ERROR, 139}, {13, SHIFT, 94}, {14, SHIFT, 95}, {15, SHIFT, 96}, {22, SHIFT, 153}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 142}, {32, SHIFT, 9}, {33, SHIFT, 10}, {37, SHIFT, 12}, {39, SHIFT, 154}, {40, SHIFT, 155}, {41, SHIFT, 13}, {44, SHIFT, 14}, {49, SHIFT, 15}, {52, SHIFT, 16}, {56, SHIFT, 17}, },
			{{-1, ERROR, 143}, {32, SHIFT, 9}, {33, SHIFT, 10}, {37, SHIFT, 12}, {41, SHIFT, 13}, {43, SHIFT, 157}, {44, SHIFT, 14}, {49, SHIFT, 15}, {52, SHIFT, 16}, {56, SHIFT, 17}, },
			{{-1, ERROR, 144}, {42, SHIFT, 158}, },
			{{-1, ERROR, 145}, {46, SHIFT, 159}, },
			{{-1, ERROR, 146}, {32, SHIFT, 9}, {33, SHIFT, 10}, {37, SHIFT, 12}, {41, SHIFT, 13}, {44, SHIFT, 14}, {49, SHIFT, 15}, {52, SHIFT, 16}, {56, SHIFT, 17}, },
			{{-1, ERROR, 147}, {20, SHIFT, 161}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 149}, {17, SHIFT, 162}, },
			{{-1, ERROR, 150}, {17, SHIFT, 163}, },
			{{-1, REDUCE, 71}, },
			{{-1, ERROR, 152}, {51, SHIFT, 164}, },
			{{-1, ERROR, 153}, {17, SHIFT, 165}, },
			{{-1, ERROR, 154}, {32, SHIFT, 9}, {33, SHIFT, 10}, {37, SHIFT, 12}, {41, SHIFT, 13}, {44, SHIFT, 14}, {49, SHIFT, 15}, {52, SHIFT, 16}, {56, SHIFT, 17}, },
			{{-1, ERROR, 155}, {17, SHIFT, 167}, },
			{{-1, ERROR, 156}, {40, SHIFT, 168}, },
			{{-1, ERROR, 157}, {17, SHIFT, 169}, },
			{{-1, ERROR, 158}, {32, SHIFT, 9}, {33, SHIFT, 10}, {37, SHIFT, 12}, {41, SHIFT, 13}, {44, SHIFT, 14}, {49, SHIFT, 15}, {52, SHIFT, 16}, {56, SHIFT, 17}, },
			{{-1, ERROR, 159}, {54, SHIFT, 171}, },
			{{-1, REDUCE, 21}, {32, SHIFT, 9}, {33, SHIFT, 10}, {37, SHIFT, 12}, {41, SHIFT, 13}, {44, SHIFT, 14}, {49, SHIFT, 15}, {52, SHIFT, 16}, {56, SHIFT, 17}, },
			{{-1, ERROR, 161}, {32, SHIFT, 9}, {33, SHIFT, 10}, {37, SHIFT, 12}, {41, SHIFT, 13}, {44, SHIFT, 14}, {49, SHIFT, 15}, {52, SHIFT, 16}, {56, SHIFT, 17}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 164}, {17, SHIFT, 173}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 19}, {32, SHIFT, 9}, {33, SHIFT, 10}, {37, SHIFT, 12}, {41, SHIFT, 13}, {44, SHIFT, 14}, {49, SHIFT, 15}, {52, SHIFT, 16}, {56, SHIFT, 17}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 168}, {17, SHIFT, 174}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 170}, {32, SHIFT, 9}, {33, SHIFT, 10}, {37, SHIFT, 12}, {41, SHIFT, 13}, {44, SHIFT, 14}, {48, SHIFT, 175}, {49, SHIFT, 15}, {52, SHIFT, 16}, {56, SHIFT, 17}, },
			{{-1, ERROR, 171}, {42, SHIFT, 176}, },
			{{-1, REDUCE, 20}, {32, SHIFT, 9}, {33, SHIFT, 10}, {37, SHIFT, 12}, {41, SHIFT, 13}, {44, SHIFT, 14}, {49, SHIFT, 15}, {52, SHIFT, 16}, {56, SHIFT, 17}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 175}, {17, SHIFT, 177}, },
			{{-1, ERROR, 176}, {32, SHIFT, 9}, {33, SHIFT, 10}, {37, SHIFT, 12}, {41, SHIFT, 13}, {44, SHIFT, 14}, {49, SHIFT, 15}, {52, SHIFT, 16}, {56, SHIFT, 17}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 178}, {32, SHIFT, 9}, {33, SHIFT, 10}, {37, SHIFT, 12}, {41, SHIFT, 13}, {44, SHIFT, 14}, {48, SHIFT, 179}, {49, SHIFT, 15}, {52, SHIFT, 16}, {56, SHIFT, 17}, },
			{{-1, ERROR, 179}, {17, SHIFT, 180}, },
			{{-1, REDUCE, 36}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 19}, {23, 37}, },
			{{-1, 41}, {43, 75}, },
			{{-1, 20}, },
			{{-1, 50}, {4, 21}, {14, 29}, {16, 21}, {23, 21}, {24, 21}, {25, 42}, {31, 21}, {34, 69}, {38, 21}, {43, 76}, {70, 107}, {129, 21}, {130, 21}, {142, 21}, {143, 21}, {146, 21}, {154, 21}, {158, 21}, {160, 21}, {161, 21}, {166, 21}, {170, 21}, {172, 21}, {176, 21}, {178, 21}, },
			{{-1, 51}, {33, 68}, {134, 147}, },
			{{-1, 52}, {30, 65}, {35, 71}, {60, 97}, },
			{{-1, 53}, {60, 98}, },
			{{-1, 156}, },
			{{-1, 136}, {138, 151}, },
			{{-1, 137}, {138, 152}, },
			{{-1, 22}, {24, 40}, {31, 40}, {38, 40}, {142, 40}, {143, 40}, {160, 40}, {166, 40}, {170, 40}, {172, 40}, {178, 40}, },
			{{-1, 61}, {26, 54}, {30, 54}, {35, 54}, {46, 80}, {60, 54}, {77, 111}, {86, 117}, {87, 118}, {88, 119}, {89, 120}, {90, 121}, {91, 122}, },
			{{-1, 55}, {84, 115}, {85, 116}, },
			{{-1, 56}, {44, 78}, {92, 123}, {93, 124}, },
			{{-1, 57}, {27, 62}, {28, 63}, {46, 81}, {103, 139}, },
			{{-1, 58}, {45, 79}, {94, 125}, {95, 126}, {96, 127}, },
			{{-1, 59}, },
			{{-1, 23}, },
			{{-1, 24}, {16, 31}, {23, 38}, {129, 142}, {130, 143}, {146, 160}, {154, 166}, {158, 170}, {161, 172}, {176, 178}, },
			{{-1, 70}, },
			{{-1, 43}, },
			{{-1, 60}, },
			{{-1, 138}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'programa'",
			"expecting: id",
			"expecting: EOF",
			"expecting: 'inicio'",
			"expecting: 'fim.', 'caractere', 'inteiro', 'real', 'leia', 'escreva', 'booleano', 'se', 'enquanto', 'para', 'avalie', 'repita', id, 'constante'",
			"expecting: ':'",
			"expecting: '('",
			"expecting: 'leia', 'escreva', 'se', 'enquanto', 'para', 'avalie', 'repita', id",
			"expecting: '-', '+', '*', '/', '>', '<', '>=', '<=', '=', '<>', ':=', 'e', 'ou', 'xor', ',', ';', '[', ')', 'de', id",
			"expecting: ':='",
			"expecting: 'fim.', 'leia', 'escreva', 'se', 'senao', 'fim se', 'enquanto', 'fim enquanto', 'para', 'ate', 'fim para', 'avalie', 'caso', 'fim avalie', 'repita', id",
			"expecting: 'fim.', 'leia', 'escreva', 'se', 'enquanto', 'para', 'avalie', 'repita', id",
			"expecting: '-', 'nao', '(', string, n inteiro, n real, id",
			"expecting: 'de'",
			"expecting: 'leia', 'escreva', 'se', 'enquanto', 'para', 'ate', 'avalie', 'repita', id",
			"expecting: n inteiro",
			"expecting: string, n inteiro, n real",
			"expecting: ',', ')'",
			"expecting: '-', '(', string, n inteiro, n real, id",
			"expecting: '-', '+', '*', '/', '>', '<', '>=', '<=', '=', '<>', 'e', 'ou', 'xor', ',', ';', ':', ')'",
			"expecting: '-', '+', '*', '/', '>', '<', '>=', '<=', '=', '<>', 'e', 'ou', 'xor', ',', ';', ')'",
			"expecting: '-', '+', '>', '<', '>=', '<=', '=', '<>', ',', ';', ')'",
			"expecting: 'e', 'ou', 'xor', ',', ';', ')'",
			"expecting: '-', '+', '>', '<', '>=', '<=', '=', '<>'",
			"expecting: 'e', 'ou', 'xor', ')'",
			"expecting: ')'",
			"expecting: ']'",
			"expecting: ';'",
			"expecting: ';', id",
			"expecting: '-', '+', '>', '<', '>=', '<=', '=', '<>', ')'",
			"expecting: 'entao'",
			"expecting: 'faca'",
			"expecting: 'ate', 'passo'",
			"expecting: 'senao', 'caso', 'fim avalie'",
			"expecting: '-', '+', '*', '/', '>', '<', '>=', '<=', '=', '<>', ':=', 'e', 'ou', 'xor', ',', ';', ')', 'de', id",
			"expecting: '-', '+', ')'",
			"expecting: '-', '+', 'e', 'ou', 'xor', ',', ';', ')'",
			"expecting: 'fim avalie'",
			"expecting: 'leia', 'escreva', 'se', 'senao', 'fim se', 'enquanto', 'para', 'avalie', 'repita', id",
			"expecting: 'leia', 'escreva', 'se', 'enquanto', 'fim enquanto', 'para', 'avalie', 'repita', id",
			"expecting: 'ate'",
			"expecting: 'fim se'",
			"expecting: 'leia', 'escreva', 'se', 'enquanto', 'para', 'avalie', 'fim avalie', 'repita', id",
			"expecting: 'leia', 'escreva', 'se', 'fim se', 'enquanto', 'para', 'avalie', 'repita', id",
			"expecting: 'leia', 'escreva', 'se', 'enquanto', 'para', 'fim para', 'avalie', 'repita', id",
			"expecting: 'leia', 'escreva', 'se', 'senao', 'enquanto', 'para', 'avalie', 'caso', 'fim avalie', 'repita', id",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 2, 5, 5, 5, 6, 6, 5, 6, 6, 1, 6, 7, 8, 1, 4, 5, 9, 10, 4, 11, 1, 12, 12, 12, 13, 12, 14, 15, 16, 1, 12, 2, 4, 11, 2, 10, 1, 17, 1, 18, 18, 12, 19, 19, 19, 20, 20, 17, 12, 21, 20, 20, 22, 22, 22, 12, 23, 24, 24, 15, 25, 6, 26, 27, 28, 28, 27, 2, 1, 27, 1, 17, 18, 20, 22, 29, 24, 12, 27, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 12, 30, 31, 32, 33, 12, 34, 4, 4, 28, 10, 10, 27, 35, 20, 22, 10, 20, 20, 36, 36, 36, 36, 36, 36, 20, 20, 22, 22, 22, 27, 7, 7, 15, 15, 5, 16, 27, 33, 37, 33, 24, 10, 10, 38, 39, 31, 40, 7, 5, 10, 27, 27, 33, 37, 27, 7, 27, 41, 27, 7, 15, 42, 7, 10, 10, 27, 10, 43, 10, 27, 10, 44, 31, 45, 10, 10, 27, 7, 10, 44, 27, 10, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
