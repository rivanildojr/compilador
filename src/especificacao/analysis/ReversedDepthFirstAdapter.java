/* This file was generated by SableCC (http://www.sablecc.org/). */

package especificacao.analysis;

import java.util.*;
import especificacao.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPStart().apply(this);
        outStart(node);
    }

    public void inAStart(AStart node)
    {
        defaultIn(node);
    }

    public void outAStart(AStart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStart(AStart node)
    {
        inAStart(node);
        {
            List<PComandos> copy = new ArrayList<PComandos>(node.getComandos());
            Collections.reverse(copy);
            for(PComandos e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PDeclaracao> copy = new ArrayList<PDeclaracao>(node.getDeclaracao());
            Collections.reverse(copy);
            for(PDeclaracao e : copy)
            {
                e.apply(this);
            }
        }
        outAStart(node);
    }

    public void inADeclaracaoCDeclaracao(ADeclaracaoCDeclaracao node)
    {
        defaultIn(node);
    }

    public void outADeclaracaoCDeclaracao(ADeclaracaoCDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracaoCDeclaracao(ADeclaracaoCDeclaracao node)
    {
        inADeclaracaoCDeclaracao(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outADeclaracaoCDeclaracao(node);
    }

    public void inADeclaracaoMDeclaracao(ADeclaracaoMDeclaracao node)
    {
        defaultIn(node);
    }

    public void outADeclaracaoMDeclaracao(ADeclaracaoMDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracaoMDeclaracao(ADeclaracaoMDeclaracao node)
    {
        inADeclaracaoMDeclaracao(node);
        {
            List<PVar> copy = new ArrayList<PVar>(node.getVar());
            Collections.reverse(copy);
            for(PVar e : copy)
            {
                e.apply(this);
            }
        }
        outADeclaracaoMDeclaracao(node);
    }

    public void inARealTipo(ARealTipo node)
    {
        defaultIn(node);
    }

    public void outARealTipo(ARealTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealTipo(ARealTipo node)
    {
        inARealTipo(node);
        if(node.getReal() != null)
        {
            node.getReal().apply(this);
        }
        outARealTipo(node);
    }

    public void inAInteiroTipo(AInteiroTipo node)
    {
        defaultIn(node);
    }

    public void outAInteiroTipo(AInteiroTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInteiroTipo(AInteiroTipo node)
    {
        inAInteiroTipo(node);
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        outAInteiroTipo(node);
    }

    public void inACaractereTipo(ACaractereTipo node)
    {
        defaultIn(node);
    }

    public void outACaractereTipo(ACaractereTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaractereTipo(ACaractereTipo node)
    {
        inACaractereTipo(node);
        if(node.getCaractere() != null)
        {
            node.getCaractere().apply(this);
        }
        outACaractereTipo(node);
    }

    public void inABooleanoTipo(ABooleanoTipo node)
    {
        defaultIn(node);
    }

    public void outABooleanoTipo(ABooleanoTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanoTipo(ABooleanoTipo node)
    {
        inABooleanoTipo(node);
        if(node.getBooleano() != null)
        {
            node.getBooleano().apply(this);
        }
        outABooleanoTipo(node);
    }

    public void inAIdVar(AIdVar node)
    {
        defaultIn(node);
    }

    public void outAIdVar(AIdVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdVar(AIdVar node)
    {
        inAIdVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdVar(node);
    }

    public void inAVetorVar(AVetorVar node)
    {
        defaultIn(node);
    }

    public void outAVetorVar(AVetorVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVetorVar(AVetorVar node)
    {
        inAVetorVar(node);
        if(node.getNInteiro() != null)
        {
            node.getNInteiro().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAVetorVar(node);
    }

    public void inAStringValor(AStringValor node)
    {
        defaultIn(node);
    }

    public void outAStringValor(AStringValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringValor(AStringValor node)
    {
        inAStringValor(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringValor(node);
    }

    public void inANInteiroValor(ANInteiroValor node)
    {
        defaultIn(node);
    }

    public void outANInteiroValor(ANInteiroValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANInteiroValor(ANInteiroValor node)
    {
        inANInteiroValor(node);
        if(node.getNInteiro() != null)
        {
            node.getNInteiro().apply(this);
        }
        outANInteiroValor(node);
    }

    public void inANRealValor(ANRealValor node)
    {
        defaultIn(node);
    }

    public void outANRealValor(ANRealValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANRealValor(ANRealValor node)
    {
        inANRealValor(node);
        if(node.getNReal() != null)
        {
            node.getNReal().apply(this);
        }
        outANRealValor(node);
    }

    public void inAExpLExp(AExpLExp node)
    {
        defaultIn(node);
    }

    public void outAExpLExp(AExpLExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpLExp(AExpLExp node)
    {
        inAExpLExp(node);
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        outAExpLExp(node);
    }

    public void inAExpAExp(AExpAExp node)
    {
        defaultIn(node);
    }

    public void outAExpAExp(AExpAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpAExp(AExpAExp node)
    {
        inAExpAExp(node);
        if(node.getExpAritmetica() != null)
        {
            node.getExpAritmetica().apply(this);
        }
        outAExpAExp(node);
    }

    public void inAAtribuicaoComandos(AAtribuicaoComandos node)
    {
        defaultIn(node);
    }

    public void outAAtribuicaoComandos(AAtribuicaoComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribuicaoComandos(AAtribuicaoComandos node)
    {
        inAAtribuicaoComandos(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAAtribuicaoComandos(node);
    }

    public void inALeiaComandos(ALeiaComandos node)
    {
        defaultIn(node);
    }

    public void outALeiaComandos(ALeiaComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeiaComandos(ALeiaComandos node)
    {
        inALeiaComandos(node);
        {
            List<PVar> copy = new ArrayList<PVar>(node.getVar());
            Collections.reverse(copy);
            for(PVar e : copy)
            {
                e.apply(this);
            }
        }
        outALeiaComandos(node);
    }

    public void inAEscrevaComandos(AEscrevaComandos node)
    {
        defaultIn(node);
    }

    public void outAEscrevaComandos(AEscrevaComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEscrevaComandos(AEscrevaComandos node)
    {
        inAEscrevaComandos(node);
        {
            List<PExp> copy = new ArrayList<PExp>(node.getExp());
            Collections.reverse(copy);
            for(PExp e : copy)
            {
                e.apply(this);
            }
        }
        outAEscrevaComandos(node);
    }

    public void inASeComandos(ASeComandos node)
    {
        defaultIn(node);
    }

    public void outASeComandos(ASeComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeComandos(ASeComandos node)
    {
        inASeComandos(node);
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        outASeComandos(node);
    }

    public void inAAvalieComandos(AAvalieComandos node)
    {
        defaultIn(node);
    }

    public void outAAvalieComandos(AAvalieComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAvalieComandos(AAvalieComandos node)
    {
        inAAvalieComandos(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAAvalieComandos(node);
    }

    public void inAEnquantoComandos(AEnquantoComandos node)
    {
        defaultIn(node);
    }

    public void outAEnquantoComandos(AEnquantoComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnquantoComandos(AEnquantoComandos node)
    {
        inAEnquantoComandos(node);
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        outAEnquantoComandos(node);
    }

    public void inARepitaComandos(ARepitaComandos node)
    {
        defaultIn(node);
    }

    public void outARepitaComandos(ARepitaComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARepitaComandos(ARepitaComandos node)
    {
        inARepitaComandos(node);
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        outARepitaComandos(node);
    }

    public void inAParaComandos(AParaComandos node)
    {
        defaultIn(node);
    }

    public void outAParaComandos(AParaComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaComandos(AParaComandos node)
    {
        inAParaComandos(node);
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        if(node.getInicio() != null)
        {
            node.getInicio().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAParaComandos(node);
    }

    public void inAParaPassoComandos(AParaPassoComandos node)
    {
        defaultIn(node);
    }

    public void outAParaPassoComandos(AParaPassoComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaPassoComandos(AParaPassoComandos node)
    {
        inAParaPassoComandos(node);
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        if(node.getPassos() != null)
        {
            node.getPassos().apply(this);
        }
        if(node.getInicio() != null)
        {
            node.getInicio().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAParaPassoComandos(node);
    }

    public void inASomaExpAritmetica(ASomaExpAritmetica node)
    {
        defaultIn(node);
    }

    public void outASomaExpAritmetica(ASomaExpAritmetica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASomaExpAritmetica(ASomaExpAritmetica node)
    {
        inASomaExpAritmetica(node);
        if(node.getDireita() != null)
        {
            node.getDireita().apply(this);
        }
        if(node.getEsquerda() != null)
        {
            node.getEsquerda().apply(this);
        }
        outASomaExpAritmetica(node);
    }

    public void inASubtracaoExpAritmetica(ASubtracaoExpAritmetica node)
    {
        defaultIn(node);
    }

    public void outASubtracaoExpAritmetica(ASubtracaoExpAritmetica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubtracaoExpAritmetica(ASubtracaoExpAritmetica node)
    {
        inASubtracaoExpAritmetica(node);
        if(node.getDireita() != null)
        {
            node.getDireita().apply(this);
        }
        if(node.getEsquerda() != null)
        {
            node.getEsquerda().apply(this);
        }
        outASubtracaoExpAritmetica(node);
    }

    public void inAMultExpAritmetica(AMultExpAritmetica node)
    {
        defaultIn(node);
    }

    public void outAMultExpAritmetica(AMultExpAritmetica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultExpAritmetica(AMultExpAritmetica node)
    {
        inAMultExpAritmetica(node);
        if(node.getDireita() != null)
        {
            node.getDireita().apply(this);
        }
        if(node.getEsquerda() != null)
        {
            node.getEsquerda().apply(this);
        }
        outAMultExpAritmetica(node);
    }

    public void inADivExpAritmetica(ADivExpAritmetica node)
    {
        defaultIn(node);
    }

    public void outADivExpAritmetica(ADivExpAritmetica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivExpAritmetica(ADivExpAritmetica node)
    {
        inADivExpAritmetica(node);
        if(node.getDireita() != null)
        {
            node.getDireita().apply(this);
        }
        if(node.getEsquerda() != null)
        {
            node.getEsquerda().apply(this);
        }
        outADivExpAritmetica(node);
    }

    public void inAExpParentesesExpAritmetica(AExpParentesesExpAritmetica node)
    {
        defaultIn(node);
    }

    public void outAExpParentesesExpAritmetica(AExpParentesesExpAritmetica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpParentesesExpAritmetica(AExpParentesesExpAritmetica node)
    {
        inAExpParentesesExpAritmetica(node);
        if(node.getExpAritmetica() != null)
        {
            node.getExpAritmetica().apply(this);
        }
        outAExpParentesesExpAritmetica(node);
    }

    public void inAValorExpAritmetica(AValorExpAritmetica node)
    {
        defaultIn(node);
    }

    public void outAValorExpAritmetica(AValorExpAritmetica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValorExpAritmetica(AValorExpAritmetica node)
    {
        inAValorExpAritmetica(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAValorExpAritmetica(node);
    }

    public void inAMenosExpAritmetica(AMenosExpAritmetica node)
    {
        defaultIn(node);
    }

    public void outAMenosExpAritmetica(AMenosExpAritmetica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosExpAritmetica(AMenosExpAritmetica node)
    {
        inAMenosExpAritmetica(node);
        if(node.getExpAritmetica() != null)
        {
            node.getExpAritmetica().apply(this);
        }
        outAMenosExpAritmetica(node);
    }

    public void inAVarExpAritmetica(AVarExpAritmetica node)
    {
        defaultIn(node);
    }

    public void outAVarExpAritmetica(AVarExpAritmetica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarExpAritmetica(AVarExpAritmetica node)
    {
        inAVarExpAritmetica(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarExpAritmetica(node);
    }

    public void inAEExpLogica(AEExpLogica node)
    {
        defaultIn(node);
    }

    public void outAEExpLogica(AEExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEExpLogica(AEExpLogica node)
    {
        inAEExpLogica(node);
        if(node.getDireita() != null)
        {
            node.getDireita().apply(this);
        }
        if(node.getEsquerda() != null)
        {
            node.getEsquerda().apply(this);
        }
        outAEExpLogica(node);
    }

    public void inAOuExpLogica(AOuExpLogica node)
    {
        defaultIn(node);
    }

    public void outAOuExpLogica(AOuExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOuExpLogica(AOuExpLogica node)
    {
        inAOuExpLogica(node);
        if(node.getDireita() != null)
        {
            node.getDireita().apply(this);
        }
        if(node.getEsquerda() != null)
        {
            node.getEsquerda().apply(this);
        }
        outAOuExpLogica(node);
    }

    public void inANaoExpLogica(ANaoExpLogica node)
    {
        defaultIn(node);
    }

    public void outANaoExpLogica(ANaoExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANaoExpLogica(ANaoExpLogica node)
    {
        inANaoExpLogica(node);
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        outANaoExpLogica(node);
    }

    public void inAXorExpLogica(AXorExpLogica node)
    {
        defaultIn(node);
    }

    public void outAXorExpLogica(AXorExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXorExpLogica(AXorExpLogica node)
    {
        inAXorExpLogica(node);
        if(node.getDireita() != null)
        {
            node.getDireita().apply(this);
        }
        if(node.getEsquerda() != null)
        {
            node.getEsquerda().apply(this);
        }
        outAXorExpLogica(node);
    }

    public void inAExploParentesesExpLogica(AExploParentesesExpLogica node)
    {
        defaultIn(node);
    }

    public void outAExploParentesesExpLogica(AExploParentesesExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExploParentesesExpLogica(AExploParentesesExpLogica node)
    {
        inAExploParentesesExpLogica(node);
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        outAExploParentesesExpLogica(node);
    }

    public void inAIgualExpLogica(AIgualExpLogica node)
    {
        defaultIn(node);
    }

    public void outAIgualExpLogica(AIgualExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIgualExpLogica(AIgualExpLogica node)
    {
        inAIgualExpLogica(node);
        if(node.getDireita() != null)
        {
            node.getDireita().apply(this);
        }
        if(node.getEsquerda() != null)
        {
            node.getEsquerda().apply(this);
        }
        outAIgualExpLogica(node);
    }

    public void inADiferenteExpLogica(ADiferenteExpLogica node)
    {
        defaultIn(node);
    }

    public void outADiferenteExpLogica(ADiferenteExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADiferenteExpLogica(ADiferenteExpLogica node)
    {
        inADiferenteExpLogica(node);
        if(node.getDireita() != null)
        {
            node.getDireita().apply(this);
        }
        if(node.getEsquerda() != null)
        {
            node.getEsquerda().apply(this);
        }
        outADiferenteExpLogica(node);
    }

    public void inAMenorIgualExpLogica(AMenorIgualExpLogica node)
    {
        defaultIn(node);
    }

    public void outAMenorIgualExpLogica(AMenorIgualExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorIgualExpLogica(AMenorIgualExpLogica node)
    {
        inAMenorIgualExpLogica(node);
        if(node.getDireita() != null)
        {
            node.getDireita().apply(this);
        }
        if(node.getEsquerda() != null)
        {
            node.getEsquerda().apply(this);
        }
        outAMenorIgualExpLogica(node);
    }

    public void inAMaiorIgualExpLogica(AMaiorIgualExpLogica node)
    {
        defaultIn(node);
    }

    public void outAMaiorIgualExpLogica(AMaiorIgualExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorIgualExpLogica(AMaiorIgualExpLogica node)
    {
        inAMaiorIgualExpLogica(node);
        if(node.getDireita() != null)
        {
            node.getDireita().apply(this);
        }
        if(node.getEsquerda() != null)
        {
            node.getEsquerda().apply(this);
        }
        outAMaiorIgualExpLogica(node);
    }

    public void inAMenorExpLogica(AMenorExpLogica node)
    {
        defaultIn(node);
    }

    public void outAMenorExpLogica(AMenorExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorExpLogica(AMenorExpLogica node)
    {
        inAMenorExpLogica(node);
        if(node.getDireita() != null)
        {
            node.getDireita().apply(this);
        }
        if(node.getEsquerda() != null)
        {
            node.getEsquerda().apply(this);
        }
        outAMenorExpLogica(node);
    }

    public void inAMaiorExpLogica(AMaiorExpLogica node)
    {
        defaultIn(node);
    }

    public void outAMaiorExpLogica(AMaiorExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorExpLogica(AMaiorExpLogica node)
    {
        inAMaiorExpLogica(node);
        if(node.getDireita() != null)
        {
            node.getDireita().apply(this);
        }
        if(node.getEsquerda() != null)
        {
            node.getEsquerda().apply(this);
        }
        outAMaiorExpLogica(node);
    }
}
