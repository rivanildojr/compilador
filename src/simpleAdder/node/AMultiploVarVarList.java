/* This file was generated by SableCC (http://www.sablecc.org/). */

package simpleAdder.node;

import simpleAdder.analysis.*;

@SuppressWarnings("nls")
public final class AMultiploVarVarList extends PVarList
{
    private PVarList _varList_;
    private PVarV _varV_;

    public AMultiploVarVarList()
    {
        // Constructor
    }

    public AMultiploVarVarList(
        @SuppressWarnings("hiding") PVarList _varList_,
        @SuppressWarnings("hiding") PVarV _varV_)
    {
        // Constructor
        setVarList(_varList_);

        setVarV(_varV_);

    }

    @Override
    public Object clone()
    {
        return new AMultiploVarVarList(
            cloneNode(this._varList_),
            cloneNode(this._varV_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMultiploVarVarList(this);
    }

    public PVarList getVarList()
    {
        return this._varList_;
    }

    public void setVarList(PVarList node)
    {
        if(this._varList_ != null)
        {
            this._varList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._varList_ = node;
    }

    public PVarV getVarV()
    {
        return this._varV_;
    }

    public void setVarV(PVarV node)
    {
        if(this._varV_ != null)
        {
            this._varV_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._varV_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._varList_)
            + toString(this._varV_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._varList_ == child)
        {
            this._varList_ = null;
            return;
        }

        if(this._varV_ == child)
        {
            this._varV_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._varList_ == oldChild)
        {
            setVarList((PVarList) newChild);
            return;
        }

        if(this._varV_ == oldChild)
        {
            setVarV((PVarV) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
