/* This file was generated by SableCC (http://www.sablecc.org/). */

package simpleAdder.analysis;

import java.util.*;
import simpleAdder.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPStart().apply(this);
        outStart(node);
    }

    public void inAStartStart(AStartStart node)
    {
        defaultIn(node);
    }

    public void outAStartStart(AStartStart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStartStart(AStartStart node)
    {
        inAStartStart(node);
        if(node.getFimPrograma() != null)
        {
            node.getFimPrograma().apply(this);
        }
        if(node.getCorpo() != null)
        {
            node.getCorpo().apply(this);
        }
        if(node.getDeclaracaoList() != null)
        {
            node.getDeclaracaoList().apply(this);
        }
        if(node.getInicio() != null)
        {
            node.getInicio().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getPrograma() != null)
        {
            node.getPrograma().apply(this);
        }
        outAStartStart(node);
    }

    public void inASimplesDecDeclaracaoList(ASimplesDecDeclaracaoList node)
    {
        defaultIn(node);
    }

    public void outASimplesDecDeclaracaoList(ASimplesDecDeclaracaoList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimplesDecDeclaracaoList(ASimplesDecDeclaracaoList node)
    {
        inASimplesDecDeclaracaoList(node);
        if(node.getDeclaracao() != null)
        {
            node.getDeclaracao().apply(this);
        }
        outASimplesDecDeclaracaoList(node);
    }

    public void inAMultiploDecDeclaracaoList(AMultiploDecDeclaracaoList node)
    {
        defaultIn(node);
    }

    public void outAMultiploDecDeclaracaoList(AMultiploDecDeclaracaoList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiploDecDeclaracaoList(AMultiploDecDeclaracaoList node)
    {
        inAMultiploDecDeclaracaoList(node);
        if(node.getDeclaracao() != null)
        {
            node.getDeclaracao().apply(this);
        }
        if(node.getDeclaracaoList() != null)
        {
            node.getDeclaracaoList().apply(this);
        }
        outAMultiploDecDeclaracaoList(node);
    }

    public void inADecMultiploDeclaracao(ADecMultiploDeclaracao node)
    {
        defaultIn(node);
    }

    public void outADecMultiploDeclaracao(ADecMultiploDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecMultiploDeclaracao(ADecMultiploDeclaracao node)
    {
        inADecMultiploDeclaracao(node);
        if(node.getDeclaracaoMultipla() != null)
        {
            node.getDeclaracaoMultipla().apply(this);
        }
        outADecMultiploDeclaracao(node);
    }

    public void inADesConstDeclaracao(ADesConstDeclaracao node)
    {
        defaultIn(node);
    }

    public void outADesConstDeclaracao(ADesConstDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADesConstDeclaracao(ADesConstDeclaracao node)
    {
        inADesConstDeclaracao(node);
        if(node.getDeclaracaoConstante() != null)
        {
            node.getDeclaracaoConstante().apply(this);
        }
        outADesConstDeclaracao(node);
    }

    public void inADeclaracaoMDeclaracaoMultipla(ADeclaracaoMDeclaracaoMultipla node)
    {
        defaultIn(node);
    }

    public void outADeclaracaoMDeclaracaoMultipla(ADeclaracaoMDeclaracaoMultipla node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracaoMDeclaracaoMultipla(ADeclaracaoMDeclaracaoMultipla node)
    {
        inADeclaracaoMDeclaracaoMultipla(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getVarList() != null)
        {
            node.getVarList().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outADeclaracaoMDeclaracaoMultipla(node);
    }

    public void inADeclaracaoMDeclaracaoConstante(ADeclaracaoMDeclaracaoConstante node)
    {
        defaultIn(node);
    }

    public void outADeclaracaoMDeclaracaoConstante(ADeclaracaoMDeclaracaoConstante node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracaoMDeclaracaoConstante(ADeclaracaoMDeclaracaoConstante node)
    {
        inADeclaracaoMDeclaracaoConstante(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getConstante() != null)
        {
            node.getConstante().apply(this);
        }
        outADeclaracaoMDeclaracaoConstante(node);
    }

    public void inAVarVVarV(AVarVVarV node)
    {
        defaultIn(node);
    }

    public void outAVarVVarV(AVarVVarV node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarVVarV(AVarVVarV node)
    {
        inAVarVVarV(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        outAVarVVarV(node);
    }

    public void inASimplesVarVarList(ASimplesVarVarList node)
    {
        defaultIn(node);
    }

    public void outASimplesVarVarList(ASimplesVarVarList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimplesVarVarList(ASimplesVarVarList node)
    {
        inASimplesVarVarList(node);
        if(node.getVarV() != null)
        {
            node.getVarV().apply(this);
        }
        outASimplesVarVarList(node);
    }

    public void inAMultiploVarVarList(AMultiploVarVarList node)
    {
        defaultIn(node);
    }

    public void outAMultiploVarVarList(AMultiploVarVarList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiploVarVarList(AMultiploVarVarList node)
    {
        inAMultiploVarVarList(node);
        if(node.getVarV() != null)
        {
            node.getVarV().apply(this);
        }
        if(node.getVarList() != null)
        {
            node.getVarList().apply(this);
        }
        outAMultiploVarVarList(node);
    }

    public void inARealTipo(ARealTipo node)
    {
        defaultIn(node);
    }

    public void outARealTipo(ARealTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealTipo(ARealTipo node)
    {
        inARealTipo(node);
        if(node.getReal() != null)
        {
            node.getReal().apply(this);
        }
        outARealTipo(node);
    }

    public void inAInteiroTipo(AInteiroTipo node)
    {
        defaultIn(node);
    }

    public void outAInteiroTipo(AInteiroTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInteiroTipo(AInteiroTipo node)
    {
        inAInteiroTipo(node);
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        outAInteiroTipo(node);
    }

    public void inACaractereTipo(ACaractereTipo node)
    {
        defaultIn(node);
    }

    public void outACaractereTipo(ACaractereTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaractereTipo(ACaractereTipo node)
    {
        inACaractereTipo(node);
        if(node.getCaractere() != null)
        {
            node.getCaractere().apply(this);
        }
        outACaractereTipo(node);
    }

    public void inABooleanoTipo(ABooleanoTipo node)
    {
        defaultIn(node);
    }

    public void outABooleanoTipo(ABooleanoTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanoTipo(ABooleanoTipo node)
    {
        inABooleanoTipo(node);
        if(node.getBooleano() != null)
        {
            node.getBooleano().apply(this);
        }
        outABooleanoTipo(node);
    }

    public void inAIdVar(AIdVar node)
    {
        defaultIn(node);
    }

    public void outAIdVar(AIdVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdVar(AIdVar node)
    {
        inAIdVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdVar(node);
    }

    public void inAVetorVar(AVetorVar node)
    {
        defaultIn(node);
    }

    public void outAVetorVar(AVetorVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVetorVar(AVetorVar node)
    {
        inAVetorVar(node);
        if(node.getDirColchete() != null)
        {
            node.getDirColchete().apply(this);
        }
        if(node.getNInteiro() != null)
        {
            node.getNInteiro().apply(this);
        }
        if(node.getEsqColchete() != null)
        {
            node.getEsqColchete().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAVetorVar(node);
    }

    public void inAStringValor(AStringValor node)
    {
        defaultIn(node);
    }

    public void outAStringValor(AStringValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringValor(AStringValor node)
    {
        inAStringValor(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringValor(node);
    }

    public void inANInteiroValor(ANInteiroValor node)
    {
        defaultIn(node);
    }

    public void outANInteiroValor(ANInteiroValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANInteiroValor(ANInteiroValor node)
    {
        inANInteiroValor(node);
        if(node.getNInteiro() != null)
        {
            node.getNInteiro().apply(this);
        }
        outANInteiroValor(node);
    }

    public void inANRealValor(ANRealValor node)
    {
        defaultIn(node);
    }

    public void outANRealValor(ANRealValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANRealValor(ANRealValor node)
    {
        inANRealValor(node);
        if(node.getNReal() != null)
        {
            node.getNReal().apply(this);
        }
        outANRealValor(node);
    }

    public void inAComandoSCorpo(AComandoSCorpo node)
    {
        defaultIn(node);
    }

    public void outAComandoSCorpo(AComandoSCorpo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoSCorpo(AComandoSCorpo node)
    {
        inAComandoSCorpo(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outAComandoSCorpo(node);
    }

    public void inAComandoMCorpo(AComandoMCorpo node)
    {
        defaultIn(node);
    }

    public void outAComandoMCorpo(AComandoMCorpo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoMCorpo(AComandoMCorpo node)
    {
        inAComandoMCorpo(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getCorpo() != null)
        {
            node.getCorpo().apply(this);
        }
        outAComandoMCorpo(node);
    }

    public void inAExpVExpV(AExpVExpV node)
    {
        defaultIn(node);
    }

    public void outAExpVExpV(AExpVExpV node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpVExpV(AExpVExpV node)
    {
        inAExpVExpV(node);
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getExpAritmetica() != null)
        {
            node.getExpAritmetica().apply(this);
        }
        outAExpVExpV(node);
    }

    public void inAExpSExpList(AExpSExpList node)
    {
        defaultIn(node);
    }

    public void outAExpSExpList(AExpSExpList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpSExpList(AExpSExpList node)
    {
        inAExpSExpList(node);
        if(node.getExpV() != null)
        {
            node.getExpV().apply(this);
        }
        outAExpSExpList(node);
    }

    public void inAExpMExpList(AExpMExpList node)
    {
        defaultIn(node);
    }

    public void outAExpMExpList(AExpMExpList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpMExpList(AExpMExpList node)
    {
        inAExpMExpList(node);
        if(node.getExpV() != null)
        {
            node.getExpV().apply(this);
        }
        if(node.getExpList() != null)
        {
            node.getExpList().apply(this);
        }
        outAExpMExpList(node);
    }

    public void inASenaoSeSenaoSe(ASenaoSeSenaoSe node)
    {
        defaultIn(node);
    }

    public void outASenaoSeSenaoSe(ASenaoSeSenaoSe node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASenaoSeSenaoSe(ASenaoSeSenaoSe node)
    {
        inASenaoSeSenaoSe(node);
        if(node.getCorpo() != null)
        {
            node.getCorpo().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        outASenaoSeSenaoSe(node);
    }

    public void inACasoAvalieCasoAvalie(ACasoAvalieCasoAvalie node)
    {
        defaultIn(node);
    }

    public void outACasoAvalieCasoAvalie(ACasoAvalieCasoAvalie node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACasoAvalieCasoAvalie(ACasoAvalieCasoAvalie node)
    {
        inACasoAvalieCasoAvalie(node);
        if(node.getCorpo() != null)
        {
            node.getCorpo().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getCaso() != null)
        {
            node.getCaso().apply(this);
        }
        outACasoAvalieCasoAvalie(node);
    }

    public void inASenaoAvalieSenaoAvalie(ASenaoAvalieSenaoAvalie node)
    {
        defaultIn(node);
    }

    public void outASenaoAvalieSenaoAvalie(ASenaoAvalieSenaoAvalie node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASenaoAvalieSenaoAvalie(ASenaoAvalieSenaoAvalie node)
    {
        inASenaoAvalieSenaoAvalie(node);
        if(node.getCorpo() != null)
        {
            node.getCorpo().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        outASenaoAvalieSenaoAvalie(node);
    }

    public void inAInteiroInicioNInteiroInicio(AInteiroInicioNInteiroInicio node)
    {
        defaultIn(node);
    }

    public void outAInteiroInicioNInteiroInicio(AInteiroInicioNInteiroInicio node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInteiroInicioNInteiroInicio(AInteiroInicioNInteiroInicio node)
    {
        inAInteiroInicioNInteiroInicio(node);
        if(node.getNInteiro() != null)
        {
            node.getNInteiro().apply(this);
        }
        outAInteiroInicioNInteiroInicio(node);
    }

    public void inAInteiroFimNInteiroFim(AInteiroFimNInteiroFim node)
    {
        defaultIn(node);
    }

    public void outAInteiroFimNInteiroFim(AInteiroFimNInteiroFim node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInteiroFimNInteiroFim(AInteiroFimNInteiroFim node)
    {
        inAInteiroFimNInteiroFim(node);
        if(node.getNInteiro() != null)
        {
            node.getNInteiro().apply(this);
        }
        outAInteiroFimNInteiroFim(node);
    }

    public void inAInteiroPassoNInteiroPasso(AInteiroPassoNInteiroPasso node)
    {
        defaultIn(node);
    }

    public void outAInteiroPassoNInteiroPasso(AInteiroPassoNInteiroPasso node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInteiroPassoNInteiroPasso(AInteiroPassoNInteiroPasso node)
    {
        inAInteiroPassoNInteiroPasso(node);
        if(node.getNInteiro() != null)
        {
            node.getNInteiro().apply(this);
        }
        outAInteiroPassoNInteiroPasso(node);
    }

    public void inAAtribuicaoComando(AAtribuicaoComando node)
    {
        defaultIn(node);
    }

    public void outAAtribuicaoComando(AAtribuicaoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribuicaoComando(AAtribuicaoComando node)
    {
        inAAtribuicaoComando(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getExpAritmetica() != null)
        {
            node.getExpAritmetica().apply(this);
        }
        if(node.getAtribuicao() != null)
        {
            node.getAtribuicao().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAAtribuicaoComando(node);
    }

    public void inALeiaComando(ALeiaComando node)
    {
        defaultIn(node);
    }

    public void outALeiaComando(ALeiaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeiaComando(ALeiaComando node)
    {
        inALeiaComando(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getDirParentese() != null)
        {
            node.getDirParentese().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getVarList() != null)
        {
            node.getVarList().apply(this);
        }
        if(node.getEsqParentese() != null)
        {
            node.getEsqParentese().apply(this);
        }
        if(node.getLeia() != null)
        {
            node.getLeia().apply(this);
        }
        outALeiaComando(node);
    }

    public void inAEscrevaComando(AEscrevaComando node)
    {
        defaultIn(node);
    }

    public void outAEscrevaComando(AEscrevaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEscrevaComando(AEscrevaComando node)
    {
        inAEscrevaComando(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getDirParentese() != null)
        {
            node.getDirParentese().apply(this);
        }
        if(node.getExpAritmetica() != null)
        {
            node.getExpAritmetica().apply(this);
        }
        if(node.getExpList() != null)
        {
            node.getExpList().apply(this);
        }
        if(node.getEsqParentese() != null)
        {
            node.getEsqParentese().apply(this);
        }
        if(node.getEscreva() != null)
        {
            node.getEscreva().apply(this);
        }
        outAEscrevaComando(node);
    }

    public void inASeComando(ASeComando node)
    {
        defaultIn(node);
    }

    public void outASeComando(ASeComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeComando(ASeComando node)
    {
        inASeComando(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getFimSe() != null)
        {
            node.getFimSe().apply(this);
        }
        if(node.getSenaoSe() != null)
        {
            node.getSenaoSe().apply(this);
        }
        if(node.getCorpo() != null)
        {
            node.getCorpo().apply(this);
        }
        if(node.getEntao() != null)
        {
            node.getEntao().apply(this);
        }
        if(node.getDirParentese() != null)
        {
            node.getDirParentese().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getEsqParentese() != null)
        {
            node.getEsqParentese().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outASeComando(node);
    }

    public void inAAvalieComando(AAvalieComando node)
    {
        defaultIn(node);
    }

    public void outAAvalieComando(AAvalieComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAvalieComando(AAvalieComando node)
    {
        inAAvalieComando(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getFimAvalie() != null)
        {
            node.getFimAvalie().apply(this);
        }
        if(node.getSenaoAvalie() != null)
        {
            node.getSenaoAvalie().apply(this);
        }
        if(node.getCasoAvalie() != null)
        {
            node.getCasoAvalie().apply(this);
        }
        if(node.getDirParentese() != null)
        {
            node.getDirParentese().apply(this);
        }
        if(node.getExpAritmetica() != null)
        {
            node.getExpAritmetica().apply(this);
        }
        if(node.getEsqParentese() != null)
        {
            node.getEsqParentese().apply(this);
        }
        if(node.getAvalie() != null)
        {
            node.getAvalie().apply(this);
        }
        outAAvalieComando(node);
    }

    public void inAEnquantoComando(AEnquantoComando node)
    {
        defaultIn(node);
    }

    public void outAEnquantoComando(AEnquantoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnquantoComando(AEnquantoComando node)
    {
        inAEnquantoComando(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getFimEnquanto() != null)
        {
            node.getFimEnquanto().apply(this);
        }
        if(node.getCorpo() != null)
        {
            node.getCorpo().apply(this);
        }
        if(node.getFaca() != null)
        {
            node.getFaca().apply(this);
        }
        if(node.getDirParentese() != null)
        {
            node.getDirParentese().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getEsqParentese() != null)
        {
            node.getEsqParentese().apply(this);
        }
        if(node.getEnquanto() != null)
        {
            node.getEnquanto().apply(this);
        }
        outAEnquantoComando(node);
    }

    public void inARepitaComando(ARepitaComando node)
    {
        defaultIn(node);
    }

    public void outARepitaComando(ARepitaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARepitaComando(ARepitaComando node)
    {
        inARepitaComando(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getDirParentese() != null)
        {
            node.getDirParentese().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getEsqParentese() != null)
        {
            node.getEsqParentese().apply(this);
        }
        if(node.getAte() != null)
        {
            node.getAte().apply(this);
        }
        if(node.getCorpo() != null)
        {
            node.getCorpo().apply(this);
        }
        if(node.getRepita() != null)
        {
            node.getRepita().apply(this);
        }
        outARepitaComando(node);
    }

    public void inAParaComando(AParaComando node)
    {
        defaultIn(node);
    }

    public void outAParaComando(AParaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaComando(AParaComando node)
    {
        inAParaComando(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getFimPara() != null)
        {
            node.getFimPara().apply(this);
        }
        if(node.getCorpo() != null)
        {
            node.getCorpo().apply(this);
        }
        if(node.getFaca() != null)
        {
            node.getFaca().apply(this);
        }
        if(node.getNInteiroFim() != null)
        {
            node.getNInteiroFim().apply(this);
        }
        if(node.getAte() != null)
        {
            node.getAte().apply(this);
        }
        if(node.getNInteiroInicio() != null)
        {
            node.getNInteiroInicio().apply(this);
        }
        if(node.getDe() != null)
        {
            node.getDe().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getPara() != null)
        {
            node.getPara().apply(this);
        }
        outAParaComando(node);
    }

    public void inAParaPassoComando(AParaPassoComando node)
    {
        defaultIn(node);
    }

    public void outAParaPassoComando(AParaPassoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaPassoComando(AParaPassoComando node)
    {
        inAParaPassoComando(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getFimPara() != null)
        {
            node.getFimPara().apply(this);
        }
        if(node.getCorpo() != null)
        {
            node.getCorpo().apply(this);
        }
        if(node.getFaca() != null)
        {
            node.getFaca().apply(this);
        }
        if(node.getNInteiroFim() != null)
        {
            node.getNInteiroFim().apply(this);
        }
        if(node.getAte() != null)
        {
            node.getAte().apply(this);
        }
        if(node.getNInteiroPasso() != null)
        {
            node.getNInteiroPasso().apply(this);
        }
        if(node.getPasso() != null)
        {
            node.getPasso().apply(this);
        }
        if(node.getNInteiroInicio() != null)
        {
            node.getNInteiroInicio().apply(this);
        }
        if(node.getDe() != null)
        {
            node.getDe().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getPara() != null)
        {
            node.getPara().apply(this);
        }
        outAParaPassoComando(node);
    }

    public void inASomaExpAritmetica(ASomaExpAritmetica node)
    {
        defaultIn(node);
    }

    public void outASomaExpAritmetica(ASomaExpAritmetica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASomaExpAritmetica(ASomaExpAritmetica node)
    {
        inASomaExpAritmetica(node);
        if(node.getTermoAritmetico() != null)
        {
            node.getTermoAritmetico().apply(this);
        }
        if(node.getMais() != null)
        {
            node.getMais().apply(this);
        }
        if(node.getExpAritmetica() != null)
        {
            node.getExpAritmetica().apply(this);
        }
        outASomaExpAritmetica(node);
    }

    public void inAMenosExpAritmetica(AMenosExpAritmetica node)
    {
        defaultIn(node);
    }

    public void outAMenosExpAritmetica(AMenosExpAritmetica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosExpAritmetica(AMenosExpAritmetica node)
    {
        inAMenosExpAritmetica(node);
        if(node.getTermoAritmetico() != null)
        {
            node.getTermoAritmetico().apply(this);
        }
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        if(node.getExpAritmetica() != null)
        {
            node.getExpAritmetica().apply(this);
        }
        outAMenosExpAritmetica(node);
    }

    public void inATermoExpAritmetica(ATermoExpAritmetica node)
    {
        defaultIn(node);
    }

    public void outATermoExpAritmetica(ATermoExpAritmetica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermoExpAritmetica(ATermoExpAritmetica node)
    {
        inATermoExpAritmetica(node);
        if(node.getTermoAritmetico() != null)
        {
            node.getTermoAritmetico().apply(this);
        }
        outATermoExpAritmetica(node);
    }

    public void inAMultTermoAritmetico(AMultTermoAritmetico node)
    {
        defaultIn(node);
    }

    public void outAMultTermoAritmetico(AMultTermoAritmetico node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultTermoAritmetico(AMultTermoAritmetico node)
    {
        inAMultTermoAritmetico(node);
        if(node.getFatorAritmetico() != null)
        {
            node.getFatorAritmetico().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getTermoAritmetico() != null)
        {
            node.getTermoAritmetico().apply(this);
        }
        outAMultTermoAritmetico(node);
    }

    public void inADivTermoAritmetico(ADivTermoAritmetico node)
    {
        defaultIn(node);
    }

    public void outADivTermoAritmetico(ADivTermoAritmetico node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivTermoAritmetico(ADivTermoAritmetico node)
    {
        inADivTermoAritmetico(node);
        if(node.getFatorAritmetico() != null)
        {
            node.getFatorAritmetico().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getTermoAritmetico() != null)
        {
            node.getTermoAritmetico().apply(this);
        }
        outADivTermoAritmetico(node);
    }

    public void inAFatorTermoAritmetico(AFatorTermoAritmetico node)
    {
        defaultIn(node);
    }

    public void outAFatorTermoAritmetico(AFatorTermoAritmetico node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFatorTermoAritmetico(AFatorTermoAritmetico node)
    {
        inAFatorTermoAritmetico(node);
        if(node.getFatorAritmetico() != null)
        {
            node.getFatorAritmetico().apply(this);
        }
        outAFatorTermoAritmetico(node);
    }

    public void inAExpParentesesFatorAritmetico(AExpParentesesFatorAritmetico node)
    {
        defaultIn(node);
    }

    public void outAExpParentesesFatorAritmetico(AExpParentesesFatorAritmetico node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpParentesesFatorAritmetico(AExpParentesesFatorAritmetico node)
    {
        inAExpParentesesFatorAritmetico(node);
        if(node.getDirParentese() != null)
        {
            node.getDirParentese().apply(this);
        }
        if(node.getExpAritmetica() != null)
        {
            node.getExpAritmetica().apply(this);
        }
        if(node.getEsqParentese() != null)
        {
            node.getEsqParentese().apply(this);
        }
        outAExpParentesesFatorAritmetico(node);
    }

    public void inAValorFatorAritmetico(AValorFatorAritmetico node)
    {
        defaultIn(node);
    }

    public void outAValorFatorAritmetico(AValorFatorAritmetico node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValorFatorAritmetico(AValorFatorAritmetico node)
    {
        inAValorFatorAritmetico(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAValorFatorAritmetico(node);
    }

    public void inAMenosFatorAritmetico(AMenosFatorAritmetico node)
    {
        defaultIn(node);
    }

    public void outAMenosFatorAritmetico(AMenosFatorAritmetico node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosFatorAritmetico(AMenosFatorAritmetico node)
    {
        inAMenosFatorAritmetico(node);
        if(node.getFatorAritmetico() != null)
        {
            node.getFatorAritmetico().apply(this);
        }
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        outAMenosFatorAritmetico(node);
    }

    public void inAEExpLogica(AEExpLogica node)
    {
        defaultIn(node);
    }

    public void outAEExpLogica(AEExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEExpLogica(AEExpLogica node)
    {
        inAEExpLogica(node);
        if(node.getTermoLogico() != null)
        {
            node.getTermoLogico().apply(this);
        }
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        outAEExpLogica(node);
    }

    public void inAOuExpLogica(AOuExpLogica node)
    {
        defaultIn(node);
    }

    public void outAOuExpLogica(AOuExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOuExpLogica(AOuExpLogica node)
    {
        inAOuExpLogica(node);
        if(node.getTermoLogico() != null)
        {
            node.getTermoLogico().apply(this);
        }
        if(node.getOu() != null)
        {
            node.getOu().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        outAOuExpLogica(node);
    }

    public void inANaoExpLogica(ANaoExpLogica node)
    {
        defaultIn(node);
    }

    public void outANaoExpLogica(ANaoExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANaoExpLogica(ANaoExpLogica node)
    {
        inANaoExpLogica(node);
        if(node.getTermoLogico() != null)
        {
            node.getTermoLogico().apply(this);
        }
        if(node.getNao() != null)
        {
            node.getNao().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        outANaoExpLogica(node);
    }

    public void inAXorExpLogica(AXorExpLogica node)
    {
        defaultIn(node);
    }

    public void outAXorExpLogica(AXorExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXorExpLogica(AXorExpLogica node)
    {
        inAXorExpLogica(node);
        if(node.getTermoLogico() != null)
        {
            node.getTermoLogico().apply(this);
        }
        if(node.getXor() != null)
        {
            node.getXor().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        outAXorExpLogica(node);
    }

    public void inATermoLExpLogica(ATermoLExpLogica node)
    {
        defaultIn(node);
    }

    public void outATermoLExpLogica(ATermoLExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermoLExpLogica(ATermoLExpLogica node)
    {
        inATermoLExpLogica(node);
        if(node.getTermoLogico() != null)
        {
            node.getTermoLogico().apply(this);
        }
        outATermoLExpLogica(node);
    }

    public void inAExploParetesesTermoLogico(AExploParetesesTermoLogico node)
    {
        defaultIn(node);
    }

    public void outAExploParetesesTermoLogico(AExploParetesesTermoLogico node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExploParetesesTermoLogico(AExploParetesesTermoLogico node)
    {
        inAExploParetesesTermoLogico(node);
        if(node.getDirParentese() != null)
        {
            node.getDirParentese().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getEsqParentese() != null)
        {
            node.getEsqParentese().apply(this);
        }
        outAExploParetesesTermoLogico(node);
    }

    public void inARelacionalTermoLogico(ARelacionalTermoLogico node)
    {
        defaultIn(node);
    }

    public void outARelacionalTermoLogico(ARelacionalTermoLogico node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARelacionalTermoLogico(ARelacionalTermoLogico node)
    {
        inARelacionalTermoLogico(node);
        if(node.getExpRelacional() != null)
        {
            node.getExpRelacional().apply(this);
        }
        outARelacionalTermoLogico(node);
    }

    public void inAIgualExpRelacional(AIgualExpRelacional node)
    {
        defaultIn(node);
    }

    public void outAIgualExpRelacional(AIgualExpRelacional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIgualExpRelacional(AIgualExpRelacional node)
    {
        inAIgualExpRelacional(node);
        if(node.getTermoAritmetico() != null)
        {
            node.getTermoAritmetico().apply(this);
        }
        if(node.getIgual() != null)
        {
            node.getIgual().apply(this);
        }
        if(node.getExpAritmetica() != null)
        {
            node.getExpAritmetica().apply(this);
        }
        outAIgualExpRelacional(node);
    }

    public void inADiferenteExpRelacional(ADiferenteExpRelacional node)
    {
        defaultIn(node);
    }

    public void outADiferenteExpRelacional(ADiferenteExpRelacional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADiferenteExpRelacional(ADiferenteExpRelacional node)
    {
        inADiferenteExpRelacional(node);
        if(node.getTermoAritmetico() != null)
        {
            node.getTermoAritmetico().apply(this);
        }
        if(node.getDiferente() != null)
        {
            node.getDiferente().apply(this);
        }
        if(node.getExpAritmetica() != null)
        {
            node.getExpAritmetica().apply(this);
        }
        outADiferenteExpRelacional(node);
    }

    public void inAMenorIgualExpRelacional(AMenorIgualExpRelacional node)
    {
        defaultIn(node);
    }

    public void outAMenorIgualExpRelacional(AMenorIgualExpRelacional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorIgualExpRelacional(AMenorIgualExpRelacional node)
    {
        inAMenorIgualExpRelacional(node);
        if(node.getTermoAritmetico() != null)
        {
            node.getTermoAritmetico().apply(this);
        }
        if(node.getMenorIgual() != null)
        {
            node.getMenorIgual().apply(this);
        }
        if(node.getExpAritmetica() != null)
        {
            node.getExpAritmetica().apply(this);
        }
        outAMenorIgualExpRelacional(node);
    }

    public void inAMaiorIgualExpRelacional(AMaiorIgualExpRelacional node)
    {
        defaultIn(node);
    }

    public void outAMaiorIgualExpRelacional(AMaiorIgualExpRelacional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorIgualExpRelacional(AMaiorIgualExpRelacional node)
    {
        inAMaiorIgualExpRelacional(node);
        if(node.getTermoAritmetico() != null)
        {
            node.getTermoAritmetico().apply(this);
        }
        if(node.getMaiorIgual() != null)
        {
            node.getMaiorIgual().apply(this);
        }
        if(node.getExpAritmetica() != null)
        {
            node.getExpAritmetica().apply(this);
        }
        outAMaiorIgualExpRelacional(node);
    }

    public void inAMenorExpRelacional(AMenorExpRelacional node)
    {
        defaultIn(node);
    }

    public void outAMenorExpRelacional(AMenorExpRelacional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorExpRelacional(AMenorExpRelacional node)
    {
        inAMenorExpRelacional(node);
        if(node.getTermoAritmetico() != null)
        {
            node.getTermoAritmetico().apply(this);
        }
        if(node.getMenor() != null)
        {
            node.getMenor().apply(this);
        }
        if(node.getExpAritmetica() != null)
        {
            node.getExpAritmetica().apply(this);
        }
        outAMenorExpRelacional(node);
    }

    public void inAMaiorExpRelacional(AMaiorExpRelacional node)
    {
        defaultIn(node);
    }

    public void outAMaiorExpRelacional(AMaiorExpRelacional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorExpRelacional(AMaiorExpRelacional node)
    {
        inAMaiorExpRelacional(node);
        if(node.getTermoAritmetico() != null)
        {
            node.getTermoAritmetico().apply(this);
        }
        if(node.getMaior() != null)
        {
            node.getMaior().apply(this);
        }
        if(node.getExpAritmetica() != null)
        {
            node.getExpAritmetica().apply(this);
        }
        outAMaiorExpRelacional(node);
    }
}
