//Especificacao da Linguagem

Package especificacao ;

Helpers
	 /* Our helpers */ 
	todos_caracteres = [0 .. 0xffff];
	digit = ['0' .. '9'];
	sp = ' ';
	underscore = '_';
	letra_minusculas = ['a' .. 'z'];
	letra_maiusculas = ['A' .. 'Z'];
	letra = letra_minusculas | letra_maiusculas;
	caract_inicial = letra | underscore;
	nl = 10;
	tab = 9;
	cr = 13;

States
	normal,
	comentario;

Tokens	
	//Operadores
	{normal} menos = '-';
	{normal} mais = '+';
	{normal} mult = '*';
	{normal} div = '/';
	{normal} mod = '%';

	{normal} maior = '>';
	{normal} menor = '<';
	{normal} maior_igual = '>=';
	{normal} menor_igual = '<=';
	{normal} igual = '=';
	{normal} diferente = '<>';
	{normal} atribuicao = ':=';
	
	{normal} nao = 'nao';
	{normal} e = 'e';
	{normal} ou = 'ou';
	{normal} xor = 'xor';

	//Separadores
	{normal} virgula = ',';
	{normal} ponto_virgula = ';';
	{normal} esq_colchete = '[';
	{normal} dir_colchete = ']';
	{normal} dois_pontos = ':';
	{normal} esq_parentese = '(';
	{normal} dir_parentese = ')';
	{normal} aspas_simples = ''';
	{normal} aspas_dupla = '"';

	//Palavras Reservadas
	{normal} programa = 'programa';
	{normal} inicio = 'inicio';
	{normal} fim_programa = 'fim.';

	{normal} caractere = 'caractere';
	{normal} inteiro = 'inteiro';
	{normal} real = 'real';
	{normal} string = 39[todos_caracteres - [nl + 39]]*39;

	{normal} leia = 'leia';
	{normal} escreva = 'escreva';

	{normal} booleano = 'booleano';
	{normal} verdadeiro = 'verdadeiro';
	{normal} false = 'false';

	{normal} se = 'se';
	{normal} entao = 'entao';
	{normal} senao = 'senao';
	{normal} fim_se = 'fim se';

	{normal} enquanto = 'enquanto';
	{normal} faca = 'faca';
	{normal} fim_enquanto = 'fim enquanto';

	{normal} para = 'para';
	{normal} de = 'de';
	{normal} ate = 'ate';
	{normal} passo = 'passo';
	{normal} fim_para = 'fim para';

	{normal} avalie = 'avalie';
	{normal} caso = 'caso';
	{normal} fim_avalie = 'fim avalie';

	{normal} repita = 'repita';
	{normal} fim_repita = 'fim repita';
	
	//Identificadores
	{normal} n_inteiro = digit+ sp*;
	{normal} n_real = '-'? digit+ ',' digit+ sp*;
	id = caract_inicial (letra | digit | underscore)* (letra)*;
	{normal} constante = 'constante';

	//Comentarios
	{normal} em_branco = (sp | tab | (nl | nl cr | cr))+;
	
	{normal -> comentario, comentario} comentario_bloco = '/*';
	{normal-> comentario, comentario} comentario_bloco_fim = '*/';
	{comentario} comentario_bloco_corpo = [todos_caracteres - ['*'+ '/']]*;
	{comentario} estrela = '*';
	{comentario} barra = '/';
	{normal} comentario_linha = '//'[32 .. 255]*;

Ignored Tokens
	em_branco,
	comentario_bloco,
	comentario_bloco_fim,
	comentario_linha;

Productions

	start = {start} programa id inicio declaracao_list? corpo? fim_programa;
	
	declaracao_list = {simples_dec} declaracao | {multiplo_dec} declaracao_list declaracao;
	
	declaracao = {dec_multiplo} declaracao_multipla 
				 | {des_const} declaracao_constante;
	
	declaracao_multipla = {declaracao_m} tipo dois_pontos var_list? var ponto_virgula;
	
	declaracao_constante = {declaracao_m} constante id valor ponto_virgula;
				
	var_v = {var_v} var virgula;
	
	var_list = {simples_var} var_v | {multiplo_var} var_list var_v;
	
	tipo = {real} real | {inteiro} inteiro | {caractere} caractere | {booleano} booleano;
	
	var = {id} id | {vetor} id esq_colchete n_inteiro dir_colchete;
	
	valor = {string} string | {n_inteiro} n_inteiro | {n_real} n_real;
	
	corpo = {comando_s} comando | {comando_m} corpo comando;
	
	exp = {exp_l} exp_logica | {exp_a} exp_aritmetica;
	
	exp_v = {exp_v} exp virgula;
	
	exp_list = {exp_s} exp_v | {exp_m} exp_list exp_v;
	
	senao_se = {senao_se} senao corpo;
	
	caso_avalie = {caso_avalie} caso valor dois_pontos corpo;
	
	senao_avalie = {senao_avalie} senao dois_pontos corpo;
	
	n_inteiro_inicio = {inteiro_inicio} n_inteiro;
	
	n_inteiro_fim = {inteiro_fim} n_inteiro;
	
	n_inteiro_passo = {inteiro_passo} n_inteiro;
	
	comando = {atribuicao} var atribuicao exp ponto_virgula
			| {leia} leia esq_parentese var_list? var dir_parentese ponto_virgula
			| {escreva} escreva esq_parentese exp_list? exp dir_parentese ponto_virgula
			| {se} se esq_parentese exp_logica dir_parentese entao corpo senao_se? fim_se ponto_virgula
			| {avalie} avalie esq_parentese exp dir_parentese caso_avalie? senao_avalie? fim_avalie ponto_virgula
			| {enquanto} enquanto esq_parentese exp_logica dir_parentese faca corpo fim_enquanto ponto_virgula
			| {repita} repita corpo ate esq_parentese exp_logica dir_parentese ponto_virgula
			| {para} para var de n_inteiro_inicio ate n_inteiro_fim faca corpo fim_para ponto_virgula
			| {para_passo} para var de n_inteiro_inicio passo n_inteiro_passo ate n_inteiro_fim faca corpo fim_para ponto_virgula;
	
	exp_aritmetica = {soma} exp_aritmetica mais termo_aritmetico
					| {menos} exp_aritmetica menos termo_aritmetico
					| {termo} termo_aritmetico;
	
	termo_aritmetico = {mult} termo_aritmetico mult fator_aritmetico 
					|	{div} termo_aritmetico div fator_aritmetico
					|   {fator} fator_aritmetico;
	
	fator_aritmetico = {exp_parenteses} esq_parentese exp_aritmetica dir_parentese
					|   {valor} valor
					|	{menos} menos fator_aritmetico
					|	{var} var;
					
	exp_logica = {e} exp_logica e termo_logico
			   | {ou} exp_logica ou termo_logico
			   | {nao} nao termo_logico
			   | {xor} exp_logica xor termo_logico
			   | {termo_l} termo_logico;
	
	termo_logico = {explo_parenteses} esq_parentese exp_logica dir_parentese
			   	|  {relacional} exp_relacional;
			   	
	exp_relacional = {igual} exp_aritmetica igual termo_aritmetico
				   | {diferente} exp_aritmetica diferente termo_aritmetico
				   | {menor_igual} exp_aritmetica menor_igual termo_aritmetico
				   | {maior_igual} exp_aritmetica maior_igual termo_aritmetico
				   | {menor} exp_aritmetica menor termo_aritmetico
				   | {maior} exp_aritmetica maior termo_aritmetico;